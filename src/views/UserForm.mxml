<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		remove="exit(event)" creationComplete="created(event)" 
		>
	<fx:Script>
		<![CDATA[
			import events.KioskError;
			import events.KioskEvent;
			import events.UserEvent;
			import events.ViewEvent;
			
			import model.ML;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			[Bindable]
			protected var validatorArr:Array;
			
			[Bindable]
			public var data:Object;
			
			
			protected var currentURN:String;
			public var optin_marketing:Boolean;
			public var optin_terms:Boolean;
			
			public function created(event:FlexEvent=null):void
			{
				this.addEventListener( Event.INIT, init);
			}
			public function init(event:Event=null):void
			{
				trace("*** INIT USERFORM ***");

				if (this.parentApplication.data!=null)
				{
					this.userFirstName.setFocus();
					data = this.parentApplication.data;
					this.currentURN = data.urn;
					optin_marketing = data.optin_marketing;
					optin_terms = data.optin_terms;

				} else
				{
					trace("NO CURRENT URN");
				}
				validatorArr = new Array();
				validatorArr.push(validateName);
				validatorArr.push(validateSurname);
				validatorArr.push(validateEmail);
				validatorArr.push(validatePhone);
				saveData.url = (this.parentApplication).baseURL+'register.php';
			}
			
			protected function exit(event:Event=null):void
			{
				trace("*** INIT USERFORM ***");
				clearForm();
			}

			protected function submit(event:MouseEvent):void 
			{
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				if (isValidForm) 
				{
					//send data
					currentURN = "1234567890"

					saveData.send({urn: this.currentURN, 
						firstname:userFirstName.text, 
						lastname: userLastName.text, 
						email: userEmail.text, 
						mobile: userMobile.text, 
						optInTerms: optin_terms ? 1 : 0, 
						optInMarketing: optin_marketing ? 1 : 0 });
				//	save();
				} 
			}
			
			
			protected function clearForm():void
			{
				userEmail.text="";
				userEmail.errorString="";
				userMobile.text="";
				userMobile.errorString="";
				userFirstName.text="";
				userFirstName.errorString="";
				userLastName.text="";
				userLastName.errorString="";
				
				
			}
			
			protected function save(e:ResultEvent=null):void
			{
				// -> Do we need to send an isRegistered? We should divide Facebook and Direct registration perhaps
				switch (e.result.result)
				{
					case "OK":
						
						this.parentApplication.dispatchEvent( new UserEvent(UserEvent.REGISTERED, "classic", e.result.id, e.result.name ));
						this.parentApplication.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_REGISTRATION_COMPLETE ) );
						break;
					
					case "DUPLICATE":// Token save 
						
						this.parentApplication.dispatchEvent(new KioskError(KioskError.ERROR, "You have already registered...", "Duplicate", home));
						break;
					
					default:
						var output:String = "";
						for (var m:String in e.result)
						{
							output = m+" "+e.result[m]+"\n";
						}
						this.parentApplication.dispatchEvent(new KioskError(KioskError.ERROR, output.toString(), "COMMUNICATION ERROR"));

				}
			}
			protected function error(e:FaultEvent):void
			{
				this.parentApplication.dispatchEvent(new KioskError(KioskError.ERROR, e.fault.message.toString(), "COMMUNICATION ERROR"));

			}
			protected function home( e:Event = null ):void {
				
				this.parentApplication.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ) );
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<mx:StringValidator id="validateName" 
							source="{userFirstName}"
							property="text"
							minLength="2">
		</mx:StringValidator>
		<mx:StringValidator id="validateSurname" 
							source="{userLastName}"
							property="text"
							minLength="2">
		</mx:StringValidator>
		<mx:EmailValidator id="validateEmail"
						   source="{userEmail}"
						   property="text">
		</mx:EmailValidator>
		<mx:PhoneNumberValidator id="validatePhone"
								 source="{userMobile}"
								 property="text"
								 >
			
		</mx:PhoneNumberValidator>


		<s:HTTPService id="saveData" resultFormat="flashvars" method="POST" url="{(this.parentApplication).baseURL+'register.php'}" result="save(event)" fault="error(event)" />
	</fx:Declarations>
	
	<s:Form width="100%" id="userform" horizontalCenter="0" verticalCenter="0">
		<s:layout>
			<s:FormLayout/>
		</s:layout>
		<s:FormHeading label="{ML.t('Please enter your details')}" />
		
		<s:FormItem label="{ML.t('First name')}:" skinClass="skins.vodafoneFormItem" >
			<s:TextInput id="userFirstName" width="650" skinClass="skins.vodafoneTextInput" />
		</s:FormItem>
		
		<s:FormItem label="{ML.t('Last name')}:"  skinClass="skins.vodafoneFormItem">
			<s:TextInput id="userLastName" width="650" skinClass="skins.vodafoneTextInput" />
		</s:FormItem>
		
		<s:FormItem label="{ML.t('Email address')}:" skinClass="skins.vodafoneFormItem">
			<s:TextInput id="userEmail" width="650" skinClass="skins.vodafoneTextInput" />
		</s:FormItem>
		
		<s:FormItem label="{ML.t('Phone number')}:" skinClass="skins.vodafoneFormItem">
			<s:TextInput id="userMobile" width="650" skinClass="skins.vodafoneTextInput" />
		</s:FormItem>

	
	<s:HGroup width="100%" horizontalAlign="center">
		
		<s:Button label="{ML.t('Cancel')}" click="home(event)" skinClass="skins.vodafoneButton"/>
		<s:Spacer width="100" />
		
		<s:Button label="{ML.t('Submit')}" click="submit(event)" skinClass="skins.vodafoneButton"/>
	</s:HGroup>
	
	</s:Form>
	
</s:Group>
