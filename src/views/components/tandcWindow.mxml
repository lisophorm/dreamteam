<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="900" added="onAdded()" remove="exit()">
	<fx:Script>
		<![CDATA[
			import flash.utils.getQualifiedClassName;
			import flash.utils.setInterval;
			
			import mx.core.UIComponent;
			import mx.core.UIFTETextField;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			
			protected var isremoving:Boolean = false;
			
			[Bindable]
			public var message:String="";
			
			[Bindable]
			public var windowTitle:String="I/O ERROR:";
			
			[Bindable]
			public var exitFunction:Function = null;
			
			private var webView:StageWebView;
			
			public var initialUrl:String;
			
			protected function onAdded(e:FlexEvent=null):void
			{
				
				try
				{
					var source:File = File.applicationDirectory.resolvePath("assets/html/tandc.html"); 
					// create file(s) in a subdir of appStorageDir to simplify cleanup
					var destination:File = File.applicationStorageDirectory.resolvePath("assets/html/tandc.html");
					// now do the copy and create a ref to our HTML file that a browser will understand
					source.copyTo(destination, true);   
					initialUrl = "file://" + destination.nativePath ;
					trace("terms added to stage");
					
				} catch (error:Error)
				{
					trace("Warning: "+error.message.toString());
				}
				
				isremoving = false;
				webView=new StageWebView();
				webView.addEventListener(LocationChangeEvent.LOCATION_CHANGING,webChanging);
				webView.addEventListener(LocationChangeEvent.LOCATION_CHANGE,webChange);
				webView.addEventListener(Event.COMPLETE,webComplete);
				webView.viewPort=new Rectangle(100,100,300,300);
				webView.stage=stage;
				webView.loadURL(initialUrl);
			}
			function webChanging(e:LocationChangeEvent) {
				trace("changing");
				webView.stage=null;
			}
			function webChange(e:LocationChangeEvent) {
				trace("webChange");
				webView.stage=null;
			}
			function webComplete(e:Event) {
				trace("complete");
				webView.stage=stage;
			}
			protected function exit(e:FlexEvent=null):void
			{
				if(webView) {
					webView.stage=null;
					webView.dispose();
				}
				isremoving = true;
				if (exitFunction!=null)
					exitFunction();
				
			}
			public function get isRemoving():Boolean
			{
				return isremoving;
			}
			
			protected function myHtml_creationCompleteHandler(event:FlexEvent):void
			{
				//var source:File = File.applicationDirectory.resolvePath("assets/html/tandc.html"); 
				//myHtml.htmlLoader.load(new URLRequest(source.url));
				
			}
			public static function traceDisplayList(displayObject:DisplayObject, instanceOnly:Boolean = false, withData:Boolean = true, withParent:Boolean = false, maxDepth:int = 100, skipClass:Class = null, levelSpace:String = " ", currentDepth:int = 0, parent:String = ""):void 
			{
				if (skipClass != null) { if (displayObject is skipClass) { return; } }
				
				var displayName:String = displayObjectCleanName(displayObject);
				displayName += (displayName != "") ? " " : "";
				if (instanceOnly && displayName == "") { return; }
				
				var className:String = getCleanClassName(displayObject);
				
				if(className=="Video") {
					trace("BEKKKATO IL VIDEO");
					var vid:flash.media.Video = displayObject as flash.media.Video;
					vid.smoothing=true;
				}
				
				
				var text:String = (className == "TextField") ? String(" \"" + TextField(displayObject).text) + "\"" : ""
				
				var objectName:String = displayName + className + text;
				
				var dataString:String = (withData) ? String(" [x:" + displayObject.x + " y:" + displayObject.y + " width:" + displayObject.width + " height:" + displayObject.height + "]") : "";
				
				var parentName:String = (withParent && parent != "") ? String(" (" +  parent + ")") : "";   
				
				var levelStr:String = (withParent) ? String(currentDepth + " ") : "";
				
				trace(levelStr + levelSpace + objectName + dataString + parentName);
				
				if (displayObject is DisplayObjectContainer && currentDepth < maxDepth)
				{       
					for (var i:int = 0; i < DisplayObjectContainer(displayObject).numChildren; i++)
					{
						traceDisplayList(DisplayObjectContainer(displayObject).getChildAt(i), instanceOnly, withData, withParent, maxDepth, skipClass, levelSpace + "    ", currentDepth + 1, objectName);
					}
				}
			}   
			
			public static function getCleanClassName(obj:*):String 
			{
				var className:String = String(getQualifiedClassName(obj));
				var indexOfString:int = className.lastIndexOf("::");
				className = (indexOfString < 0) ? className : className.slice(indexOfString + 2);
				return className;           
			}
			
			public static function displayObjectCleanName(displayObject:DisplayObject):String
			{
				return String((displayObject.name.substr(0, 8) == "instance") ? "" : displayObject.name);
			}
			
			
			protected function ciaociao_resizeHandler(event:ResizeEvent):void
			{
				//traceDisplayList(this);
				//trace("resize)");
				if(ciaociao) {
					var pt:Point=ciaociao.localToGlobal(new Point(0,0));
					trace("point.x:"+pt.x);
					trace("point.x:"+pt.y);
					if(webView) {
						//webView.viewPort=new Rectangle(pt.x,pt.y,ciaociao.width,ciaociao.height);
						//webView.stage=null;
						//	this.invalidateDisplayList();
						//	webView.viewPort=new Rectangle(pt.x,pt.y,ciaociao.width,ciaociao.height);
						//webView.stage=stage;
						
					} else {
						trace("no webview");
					}
				} else {
					
					trace("component not initiated");
				}
			}
			
		]]>
	</fx:Script>
	<fx:Metadata>
		[Event(name="closeError", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Declarations>
		<s:DropShadowFilter id="shadowfilter" strength=".8" distance="8" />
	</fx:Declarations> 
	<s:Rect id="tbFill" left="0" right="0" top="0" bottom="0" radiusX="0" >
		<s:stroke>
			<s:SolidColorStroke id="borderStroke" color="0x00adee" weight="4"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#FFFFFF"/>
		</s:fill>
	</s:Rect>
	
	<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<s:Spacer height="15" />
		<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
			<s:Label id="titleDisplay" maxDisplayedLines="1" 
					 left="9" right="36" top="1" bottom="0" minHeight="80" 
					 fontFamily="StandardRegular"
					 text="TERMS AND CONDITIONS"
					 verticalAlign="middle" horizontalCenter="0" />
		</s:HGroup>
		<s:Spacer height="15" />
		<s:Group  width="95%" id="ciaociao" height="600" resize="ciaociao_resizeHandler(event)"  >
			
			
		</s:Group>
		<s:Spacer height="15" />
		<s:Button label="CLOSE" click="PopUpManager.removePopUp(this);" />
		<s:Spacer height="15" />
	</s:VGroup>
</s:Group>