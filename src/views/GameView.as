package views{	import com.greensock.TweenMax;		import fl.text.TLFTextField;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.xml.XMLDocument;	import flash.xml.XMLNode;	import flash.display.StageDisplayState;				public class GameView extends MovieClip 	{		protected var selectClip:MovieClip;		protected var dragClip:MovieClip;		protected var hitList:Array;		protected var data:XMLList;		protected var countDownTimer:Timer;		protected var seconds:int = 90;		protected var selectedTeam:Array;		protected var playerList:Array;		protected var prefilled:Boolean = false;		protected var gameover:Boolean = false;		protected var endView:MovieClip;		protected var facebookView:MovieClip;				function GameView()		{						if (this.stage!=null)				init();			else				this.addEventListener( Event.ADDED_TO_STAGE, init);		}				protected function init( e:Event = null):void		{						stage.displayState = StageDisplayState.FULL_SCREEN; 												reset();									this.startView.addEventListener( "START", start);					}				protected function reset( e:Event = null):void		{			//do reset			this.selectedTeam = [];			this.playerList = [];			this.hitList = [];			gameover = false;						populate( xml..player);						this.clock_bg.gotoAndStop(1);			this.countDownTimer = new Timer(  1000, seconds);			this.countDownTimer.addEventListener(TimerEvent.TIMER_COMPLETE, exit);			this.countDownTimer.addEventListener(TimerEvent.TIMER, update);			//populate defenders			confirm_normal();			this.btn_teamsheet.buttonMode = this.btn_teamsheet.useHandCursor = true;			this.btn_teamsheet.addEventListener( MouseEvent.CLICK, confirm );			this.btn_teamsheet.addEventListener( MouseEvent.ROLL_OVER, confirm_over );			this.btn_teamsheet.addEventListener( MouseEvent.ROLL_OUT, confirm_normal );			this.btn_teamsheet.addEventListener( MouseEvent.MOUSE_DOWN, confirm_down );			this.btn_teamsheet.addEventListener( MouseEvent.MOUSE_UP, confirm_over );						update();					}		protected function resetAndStart( e:Event ):void		{			reset();			start();		}		protected function start( e:Event = null) : void		{						this.countDownTimer.start();											}		protected function confirm_over( e:Event=null ):void		{			this.btn_teamsheet.gotoAndStop("hover");		}		protected function confirm_normal( e:Event=null ):void		{			this.btn_teamsheet.gotoAndStop("normal");		}		protected function confirm_down( e:Event ):void		{			this.btn_teamsheet.gotoAndStop("down");		}		protected function confirm( e:Event ):void		{			this.btn_teamsheet.gotoAndStop("normal");			this.exit();		}		protected function update( e:TimerEvent = null ):void		{			var currSeconds:int = seconds - countDownTimer.currentCount;			this.txt_clock_countdown.text = "0:"+(currSeconds<10 ? "0"+currSeconds : currSeconds);			if (currSeconds<=10)			{				this.clock_bg.play();			}		}		protected function exit( e:TimerEvent = null ):void		{			gameover = true;			this.onEndDrag();			this.countDownTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, exit);			this.countDownTimer.removeEventListener(TimerEvent.TIMER, update);			this.countDownTimer = null;			this.btn_teamsheet.buttonMode = this.btn_teamsheet.useHandCursor = false;			this.btn_teamsheet.removeEventListener( MouseEvent.CLICK, confirm )			this.btn_teamsheet.removeEventListener( MouseEvent.ROLL_OVER, confirm_over );			this.btn_teamsheet.removeEventListener( MouseEvent.ROLL_OUT, confirm_normal );			this.btn_teamsheet.removeEventListener( MouseEvent.MOUSE_DOWN, confirm_down );			this.btn_teamsheet.removeEventListener( MouseEvent.MOUSE_UP, confirm_over );			confirm_normal();			this.unpopulate();			this.clock_bg.gotoAndStop(1);			if (lastHoverHit!=null)					lastHoverHit.alpha = 1;								if (!this.isComplete())			{				if (endView==null)				{					endView = new EndView();					this.addChild(endView);					this.endView.addEventListener( "START", resetAndStart);				}								endView.visible = true;				endView.txt_sorry.visible = !this.isComplete()				endView.alpha =0;				endView.x = endView.width/2;				endView.y = endView.height/2;												TweenMax.to(endView, .5, {alpha:.85});			} else 			{				if (facebookView==null)				{					facebookView = new FacebookView();					this.parent.addChild(facebookView);										this.facebookView.addEventListener( "START", resetAndStart);				}								facebookView.visible = true;				facebookView.x = -facebookView.width;				facebookView.y = 0;								TweenMax.to(facebookView, .5, {x: 0});				TweenMax.to(this, .5, {x: facebookView.width});							}		}				protected function isComplete():Boolean		{			for (var i:int = 0 ;i<this.selectedTeam.length;i++)			{				if (this.selectedTeam[i].player==null)					return false;			}			return true;		}		protected function unpopulate():void		{			for (var i:int=0;i<data.length();i++)			{				var box:MovieClip = this[data[i].@type+"_"+data[i].@id];				box.removeEventListener(MouseEvent.MOUSE_DOWN, onBeginDrag);				box.buttonMode = box.useHandCursor = false;							}		}		protected function getPlayerType( playerType:String):Array		{			var players:Array = [];			for (var i:int=0;i<data.length();i++)			{				if (this.data[i].@type==playerType)				{										players.push( {name: data[i], type: data[i].@type, index: i });										}			}			return players;		}		protected function isInSelectedList( p ):Boolean		{			for (var i:int=0;i<this.selectedTeam.length;i++)			{				if (this.selectedTeam[i].player!=null)					if (this.selectedTeam[i].player.name == p)						return true;			}			return false;		}		protected function getRandomPlayerTypeNotInList( playerType:String )		{			var players:Array = getPlayerType(playerType);			var randomCount:int = Math.floor(Math.random()*players.length)			//trace(playerType+" "+players[randomCount] +" "+ isInSelectedList(players[randomCount]) )			while (isInSelectedList(players[randomCount].name))			{				randomCount = (randomCount+1) % players.length;			}			var p = players[randomCount];			p.typeIndex = randomCount;			return p;		}		protected function populate(data:XMLList):void		{			this.data = data;			this.selectedTeam = [{ type: "goalkeeper", shirtno: 1 },								 { type: "defender", shirtno: 2 },								 { type: "defender", shirtno: 5 },								 { type: "defender", shirtno: 6 },								 { type: "defender", shirtno: 3 },								 { type: "midfielder", shirtno: 7 },								 { type: "midfielder", shirtno: 4 },								 { type: "midfielder", shirtno: 8 },								 { type: "midfielder", shirtno: 11 },								 { type: "forward", shirtno: 9 },								 { type: "forward", shirtno: 10 }								 ];								 						this.playerList = [];			for (var i:int=0;i<data.length();i++)			{												var box:MovieClip = this[data[i].@type+"_"+data[i].@id];				box.playername.text = data[i].toString().toUpperCase();				box.addEventListener(MouseEvent.MOUSE_DOWN, onBeginDrag);				box.buttonMode = box.useHandCursor = true;				this.playerList.push(box) ;			}						var lastType = "";			var typeIndex = 0;			for (var k:int=0;k<this.selectedTeam.length;k++)			{								var p = this.selectedTeam[k];				p.player = prefilled ? getRandomPlayerTypeNotInList(p.type) : null;								typeIndex = (lastType!=p.type) ? 0 : typeIndex+1;				lastType = p.type;								p.movieclip = this["selected_"+p.type+"_"+typeIndex];						}			updateSelectedTeam();		}		protected function updateSelectedTeam():void		{						for (var i:int=0;i<this.playerList.length;i++)			{				this.playerList[i].bg.gotoAndStop("initial")			}			var lastType = "";			var typeIndex = 0;			for (var k:int=0;k<this.selectedTeam.length;k++)			{				var p = this.selectedTeam[k];								typeIndex = (lastType!=p.type) ? 0 : typeIndex+1;				lastType = p.type;				this["selected_"+p.type+"_"+typeIndex].shirtno.text = p.shirtno;				this["selected_"+p.type+"_"+typeIndex].playername.text = p.player==null ? p.type.toUpperCase() : shirtname(p.player.name);				this["selected_"+p.type+"_"+typeIndex].bg.gotoAndStop( p.player==null ?  "initial" : p.type=="goalkeeper" ? "goalkeeper" : "player"  )				if (p.player!=null)				this[p.type+"_"+p.player.typeIndex].bg.gotoAndStop( p.type=="goalkeeper" ? "goalkeeper" : "player" )				trace(p.type+"_"+typeIndex)			}		}		protected function shirtname(s:String):String		{			return s.split(" ")[s.split(" ").length-1].toString().toUpperCase();		}				protected function endExit( e:Event = null ):void		{			dragClip.parent.removeChild( dragClip );			dragClip = null;								}		protected function onBeginDrag( e:MouseEvent ):void		{			selectClip = MovieClip(e.currentTarget);						dragClip = new btn_player();			dragClip.bg.gotoAndStop( selectClip.bg.currentFrame );						dragClip.x = selectClip.x;			dragClip.y = selectClip.y;			dragClip.playername.text = selectClip.playername.text;			this.addChild( dragClip );						hitList = this.lookupMatchingClips( selectClip.playername.text );			dragClip.addEventListener(MouseEvent.MOUSE_UP, onEndDrag);			dragClip.addEventListener(Event.ENTER_FRAME, hoverHit);			dragClip.startDrag(  );								}		protected function findPlayerIndex( mc:MovieClip ):int		{ 			for (var i:int=0;i<this.playerList.length;i++)			{				if (this.playerList[i] == mc)					return i;			}			return -1;		}		protected function getPlayerInSelectedTeam( mc:MovieClip ):Object		{			for (var i:int=0;i<this.selectedTeam.length;i++)			{				if (this.selectedTeam[i].movieclip == mc)					return this.selectedTeam[i];			}			return null;					}		protected function onEndDrag( e:MouseEvent=null ):void		{			if (this.dragClip==null)				return;			trace("end drag")			if (lastHoverHit!=null)					lastHoverHit.alpha = 1;			lastHoverHit = null;			var selectedClip:MovieClip = this.checkHit();			var isAlreadyInHitList:Boolean = false;					for (var i:int=0;i<hitList.length;i++)			{				if (shirtname(hitList[i].playername.text) == shirtname(dragClip.playername.text))				{					isAlreadyInHitList = true;				}			}			if (selectedClip!=null && !isAlreadyInHitList && !gameover)			{				// replace player in selectedTeam								var toReplace = getPlayerInSelectedTeam( selectedClip );				var replaceWithIndex:int = findPlayerIndex(selectClip);				var toReplaceWith = data[replaceWithIndex];				var players:Array = getPlayerType(toReplaceWith.@type);								for (var k:int=0;k<players.length;k++)				{					if (players[k].name == toReplaceWith)					{						toReplace.player = players[k];						toReplace.type = players[k].type;						toReplace.name = players[k].name;						toReplace.player.typeIndex = k;												}									}												updateSelectedTeam();												TweenMax.to( dragClip, .6, {alpha:0, onComplete: endExit});			} else 			{				//return to select clip				trace("return")				TweenMax.to( dragClip, .6, {x: selectClip.x, y:selectClip.y, alpha:0, onComplete: endExit});							}			dragClip.stopDrag();			dragClip.removeEventListener(MouseEvent.MOUSE_UP, onEndDrag);			dragClip.removeEventListener(Event.ENTER_FRAME, hoverHit);					}		protected function lookupPlayerType( name:String ):String		{			for (var i:int=0;i<data.length();i++)			{								if (data[i].toString().toUpperCase() == name)				{					return data[i].@type;				}			}			return null;		}		protected function lookupMatchingClips(name:String):Array		{			var playerType:String = lookupPlayerType(name);			var playerList:Array = [];						if (playerType!=null)			for (var i:int=0;i<this.numChildren;i++)			{				if (this.getChildAt(i).name.indexOf("selected_"+playerType)!=-1)				{										playerList.push( this.getChildAt(i) );				}			}			return playerList;		}				protected var lastHoverHit:MovieClip;		protected function hoverHit( e:Event ):void		{			var currHit:MovieClip = checkHit();			if (currHit==null)			{				if (lastHoverHit!=null)					lastHoverHit.alpha = 1;			} else 			{				if (currHit!=lastHoverHit )				{					currHit.alpha = .6;					if (lastHoverHit!=null)					lastHoverHit.alpha = 1;					lastHoverHit = currHit;									} else {					lastHoverHit.alpha = .6;				}			}					}		protected function checkHit( e:Event = null ):MovieClip		{						for (var i:int = 0;i<hitList.length;i++)			{								//if (dragClip.hitTestPoint( hitList[i].x,hitList[i].y, true   ))				try				{				if (dragClip.hitTestObject( hitList[i].bg ) )				{										return hitList[i];					}				} catch (e:Error)				{}			}			return null;		}						protected var xml:XML = <game><players>									<player type="goalkeeper" shirtno="1" id="0">David Seaman</player>									<player type="goalkeeper" shirtno="1" id="1">WOJCIECH SZCZĘSNY</player>									<player type="goalkeeper" shirtno="1" id="2">JENS LEHMANN</player>									<player type="goalkeeper" shirtno="1" id="3">Manuel Almunia</player>									<player type="defender" shirtno="2" id="0">TONY ADAMS</player>									<player type="defender" shirtno="5" id="1">Thomas Vermaelen</player>									<player type="defender" shirtno="3" id="2">William Gallas</player>									<player type="defender" shirtno="2" id="3">Sol Campbell</player>									<player type="defender" shirtno="6" id="4">Bacary Sagna</player>									<player type="defender" shirtno="3" id="5">Emmanuel Eboue</player>									<player type="defender" shirtno="5" id="6">Kolo Toure</player>									<player type="defender" shirtno="3" id="7">Philippe Senderos</player>									<player type="defender" shirtno="6" id="8">Kieran Gibbs</player>									<player type="defender" shirtno="4" id="9">Gael Clichy</player>									<player type="midfielder" shirtno="1" id="0">Jack Wilshere</player>									<player type="midfielder" shirtno="1" id="1">Theo Walcott</player>									<player type="midfielder" shirtno="1" id="2">Marc Overmars</player>									<player type="midfielder" shirtno="1" id="3">Robert Pires</player>									<player type="midfielder" shirtno="1" id="4">Aaron Ramsey</player>									<player type="midfielder" shirtno="1" id="5">Santi Cazola</player>									<player type="midfielder" shirtno="1" id="6">Cesc Fabregas</player>									<player type="midfielder" shirtno="1" id="7">Patrick Vieira</player>									<player type="midfielder" shirtno="1" id="8">Freddie Ljungberg</player>									<player type="midfielder" shirtno="1" id="9">Alexandre Song</player>									<player type="forward" shirtno="1" id="0">Robin van Persie</player>									<player type="forward" shirtno="1" id="1">Ian Wright</player>									<player type="forward" shirtno="1" id="2">Thierry Henry</player>									<player type="forward" shirtno="1" id="3">Olivier Giroud</player>									<player type="forward" shirtno="1" id="4">Dennis Bergkamp</player>									<player type="forward"  shirtno="1"id="5">Sylvain Wiltord</player>									<player type="forward" shirtno="1" id="6">Nwankwo Kano</player>									<player type="forward" shirtno="1" id="7">JOSÉ ANTONIO REYES</player>											</players></game>;	}}