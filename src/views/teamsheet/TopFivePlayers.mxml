<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 creationComplete="created(event)" xmlns:statistics="views.teamsheet.statistics.*" >
	<fx:Script>
		<![CDATA[
			import com.alfo.utils.StringUtils;
			import com.greensock.TweenMax;
			
			import mx.events.FlexEvent;
			
			import events.TeamEvent;
			
			import flashx.textLayout.compose.TextFlowLine;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.formats.LineBreak;
			
			import model.TeamModel;
			
			import views.renderer.topfive_renderer;
			
			[Bindable]
			public var topfiveData:XMLList;
			
			[Bindable]
			public var currentIndex:int=0;
			
			[Bindable]
			protected var teamColor:uint = 0xFFFFFF;
			
			[Bindable]
			protected var fontSize_Year:Number=60;
			
			[Bindable]
			protected var padTop_Year:Number=0;
			
			[Bindable]
			protected var baseShift_Year:Number=0;
			
			[Bindable]
			protected var stat1_width=300;
			
			
			public function created(event:FlexEvent=null):void
			{
				this.addEventListener( Event.INIT, init);
				init();
			}

			public function init(event:Event=null):void
			{
				if (this.parentApplication.data!=null)
				{
					/*	data = this.parentApplication.data;
					selectedTeam = data.team;
					teamname = data.team;
					Console.log( data.team, this );
					*/
				}
				
				TeamModel._instance.addEventListener( TeamEvent.TEAM_INFO, ready);
			}	

			protected function ready( e:TeamEvent ):void
			{
				if (TeamEvent.TEAM_INFO == e.type )
				{
					topfiveData = TeamModel.getTopPlayers();
					for(var a:Number=0;a<topfiveData.length();a++) {
						topfiveData[a].player.color=TeamModel.getTeamColor();
					}
					teamColor = TeamModel.getTeamColor();
					showInfo();
				}
				}
			
			public function refresh():void
			{
				if(players && topfiveData)
				{
					if(players.numElements > 0)
						topfive_renderer(players.getElementAt(0)).cover.visible = false;
					currentIndex = 0;
					showInfo();
					for(var i : int = 1; i < players.numElements; i ++)
					{
						topfive_renderer(players.getElementAt(i)).cover.visible = true;
					}
				}
			}
			
			protected function createListeners(event:Event = null):void
			{
				for(var j:uint = 0; j < players.numElements; j++)
				{
					var t:topfive_renderer = topfive_renderer(players.getElementAt( j ))
					if (players.getElementAt( j )!=null)
					{
						t.addEventListener( TouchEvent.TOUCH_TAP, mySelect);
						t.addEventListener( TouchEvent.TOUCH_ROLL_OVER,myRollOver);
						t.addEventListener( TouchEvent.TOUCH_ROLL_OUT,myRollOut);
						
						t.addEventListener(MouseEvent.CLICK, mySelect);
						t.addEventListener(MouseEvent.ROLL_OVER, myRollOver);
						t.addEventListener(MouseEvent.ROLL_OUT, myRollOut);
						t.buttonMode = t.mouseEnabled = true;
					}
				}
				try {
					topfive_renderer(players.getElementAt( currentIndex )).cover.visible = false;	
				} catch (e:Error)
				{
					
				}
			}
			
			[Bindable]
			protected var player_name:String = "";
			
			[Bindable]
			protected var shirtno:String = "";
			
			[Bindable]
			protected var description:String = "";
			
			[Bindable]
			protected var stat_POY:String = "CRYSTAL PALACE PLAYER OF THE YEAR IN";
			[Bindable]
			protected var stat_POY_years:String = "";
			[Bindable]
			protected var stat_POY_season:String = "SEASON";
			
			[Bindable]
			protected var stat_goals:String = "85";
			
			[Bindable]
			protected var stat_goals_for:String = "GOALS SCORED FOR CRYSTAL PALACE";	
			
			protected function showInfo():void
			{
				player_name = topfiveData[currentIndex].name.text().toString().toUpperCase();
				shirtno = topfiveData[currentIndex].shirtno.text();
				description = topfiveData[currentIndex].description.toString();
				
				showStatistics();
				
				var gallery:XMLList = topfiveData[currentIndex].gallery..img;
				teamshot1.source = gallery[0].@src.toString();
				teamshot2.source = gallery[1].@src.toString();
				
				try {
					topfive_renderer(players.getElementAt( currentIndex )).cover.visible = false;	
				} catch (e:Error)
				{
					trace("showinfo error");
				}
				
			}
			protected var statistics:XMLList;
			protected var statisticsIndex:int=0;
			
			var totalLines:Number;
			var prevWidth:Number;
			var prevLines:Number;
			
			protected function iterateEnlarge(e:Event) : void
			{
//				if(statA_1.textFlow.flowComposer.numLines<=4 || statA_1.width>1000) {
//					this.removeEventListener(Event.ENTER_FRAME,iterateEnlarge);
//					launchStat();
//				} else {
//					prevWidth=statA_1.width;
//					statA_1.width+=10;
//				}
			}
			
			protected function iterateShrink(e:Event) : void
			{
//				if(statA_1.textFlow.flowComposer.numLines!=prevLines || statA_1.width<100) 
//				{
//					statA_1.width=prevWidth;
//					this.removeEventListener(Event.ENTER_FRAME,iterateShrink);
//					launchStat();
//				} else {
//					prevWidth=statA_1.width;
//					
//					statA_1.width-=10;
//				}
			}
			
			protected function showKeyStat():void
			{
//				var ready:Boolean=true;
//				statA_1.width=300;
//				try
//				{
//					if ( statistics[statisticsIndex].hasOwnProperty("@key") )
//					{
//						var numWords:Array=statistics[statisticsIndex].@key.toString().split(" ");
//						if(numWords.length>1) {
//							var word1:String=numWords[0];
//							var word2:String=numWords[1];
//							if(word1.length<=3 && word2.length>10) 
//							{
//								stat1_width=500;
//							}
//						}
//						
//						stat_POY = statistics[statisticsIndex].@key.toString().toUpperCase();
//						statA_1.validateNow();
//						prevLines=statA_1.textFlow.flowComposer.numLines;
//						
//						if(statA_1.textFlow.flowComposer.numLines>4) 
//						{
//							ready=false;
//							this.addEventListener(Event.ENTER_FRAME,iterateEnlarge);
//						} else {
//							ready=false;
//							this.addEventListener(Event.ENTER_FRAME,iterateShrink);
//							
//						}
//						
//					} else {
//						stat_POY = "";
//					}
//					if ( statistics[statisticsIndex].hasOwnProperty("@value") )
//					{
//						var stat_POY_years_temp:Array=statistics[statisticsIndex].@value.toString().split(",");
//						
//						for (var u:Number=0;u<stat_POY_years_temp.length;u++) {
//							stat_POY_years_temp[u]=StringUtils.trim(stat_POY_years_temp[u]);
//						}
//						
//						switch(stat_POY_years_temp.length) {
//							case 1:
//								fontSize_Year=60;
//								stat_POY_years=stat_POY_years_temp[0];
//								break;
//							case 2:
//								fontSize_Year=40;
//								stat_POY_years=stat_POY_years_temp[0]+"\r\n"+stat_POY_years_temp[1];
//								break;
//							case 3:
//								fontSize_Year=28;
//								stat_POY_years=stat_POY_years_temp[0]+", "+stat_POY_years_temp[1]+"\r\n"+stat_POY_years_temp[2];
//								break;
//							case 4:
//								fontSize_Year=28;
//								stat_POY_years=stat_POY_years_temp[0]+", "+stat_POY_years_temp[1]+"\r\n"+stat_POY_years_temp[2]+", "+stat_POY_years_temp[3];
//								break;
//						}
//					} else {
//						stat_POY_years = "";
//					}
//					if ( statistics[statisticsIndex].hasOwnProperty("@subvalue") )
//					{
//						stat_POY_season = statistics[statisticsIndex].@subvalue.toString().toUpperCase();	
//					} else {
//						
//						stat_POY_season = "";
//					}
//				} catch (e:Error)
//				{
//				}
//				
//				if(ready) {
//					launchStat();
//				}
//				
			}
			
			protected function launchStat():void 
			{
//				statisticsIndex = (statisticsIndex+1) % (statistics.length());
//				var secondPart:Number = (stat_POY_years!="" ? (stat_POY_season!="" ? Math.max(statA_2.explicitWidth,statA_3.explicitWidth) : statA_2.explicitWidth) :  0 );
//				statRoller.width=statA_1.explicitWidth + secondPart;
//				TweenMax.to( statRoller, .5, { alpha:1, onComplete: nextStat});
//				TweenMax.to( goalgroup, .5, { alpha:1});
			}
			
			protected function nextStat( e:Event = null ):void
			{
//				TweenMax.to( statRoller, .5, {delay: 5, alpha:0, onComplete: showKeyStat});
//				TweenMax.to( goalgroup, .5, {delay: 5, alpha:0});
				
			}
			protected function showStatistics():void
			{
			 	statisticsScroller.refreshStatistics(topfiveData[currentIndex].statistics, teamColor);
				
//				TweenMax.killTweensOf( statRoller, false );
//				TweenMax.killTweensOf( goalgroup, false );
//				statistics = topfiveData[currentIndex].statistics..data;
//				if (statistics.length()>0)
//				{
//					
//					showKeyStat()
//					
//				} else 
//				{
//					stat_POY = (TeamModel.selectedTeam + " PLAYER OF THE YEAR IN").toUpperCase();
//					stat_POY_years = topfiveData[currentIndex].statistics.@poy.toString();
//				}
//				stat_goals = topfiveData[currentIndex].statistics.@goals.toString();
//				stat_goals_for = ("GOALS\r\nSCORED FOR\r\n"+TeamModel.selectedTeam).toUpperCase();
			}
			
			protected function mySelect( e:Event=null ):void
			{
				for(var j:uint = 0; j < players.numElements; j++)
				{
					topfive_renderer(players.getElementAt( j )).cover.visible = true;
					if (e.currentTarget == players.getElementAt( j ))
					{
						if (currentIndex!=j)
						{
//							TweenMax.killTweensOf( statRoller,true);
//							TweenMax.killTweensOf( goalgroup,true);
							
							currentIndex = j;
							showInfo();
						}
					}
				}
			}
			
			protected function myRollOver( e:Event ):void
			{
				e.currentTarget.cover.visible = false;
			}
			
			protected function myRollOut( e:Event ):void
			{
				if (players.getElementAt( currentIndex )!=e.currentTarget)
					e.currentTarget.cover.visible = true;
			}
			
			private function paragraphHeight(p:ParagraphElement):Number
			{
				var height:Number = 0;
				var pos:int = p.getAbsoluteStart();
				var endPos:int = pos + p.textLength;
				while (pos < endPos)
				{
					var line:TextFlowLine = p.getTextFlow().flowComposer.findLineAtPosition(pos);
					height += line.height;
					pos += line.textLength;
				}
				return height;
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	<s:VGroup horizontalCenter="0">
		
		<s:DataGroup id="players" rendererAdd="createListeners(event)"  itemRenderer="views.renderer.topfive_renderer">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout> 
			<s:XMLListCollection  id="topfiveDataList"  source="{topfiveData}"/>
		</s:DataGroup>
		
		<s:HGroup gap="0">
			
			<s:BorderContainer  backgroundAlpha=".7" borderVisible="false" backgroundColor="0x000000" width="859" height="689">
				
				<s:HGroup verticalAlign="middle">
					<s:Label text="{shirtno}" paddingLeft="32" paddingRight="32" baselineShift="-15" fontSize="160" color="{teamColor}" textAlign="center" />
					<s:Line height="100" width="2">
						<s:stroke>
							<s:SolidColorStroke color="{teamColor}" weight="2" />
						</s:stroke>
					</s:Line>
					<s:Label fontFamily="StandardRegular" text="{player_name}" paddingLeft="32"  fontSize="62" width="500" color="{teamColor}" lineHeight="70"/>	
				</s:HGroup>
				
				<s:Scroller id="scroller" top="180" height="300" skinClass="skins.ScrollBar"  verticalScrollPolicy="auto">
					
					<s:RichEditableText selectable="false" editable="false" fontFamily="StandardRegularAllCase" id="player_description" lineBreak="toFit" color="0xFFFFFF" paddingLeft="32"   textAlign="left"  maxWidth="800" paddingRight="32" fontSize="21" width="800" text="{description}" >
					</s:RichEditableText>
				</s:Scroller>
				<s:VGroup width="100%" height="180" paddingLeft="32" paddingRight="32" bottom="0">
					<s:Label text="STATISTICS" lineBreak="toFit" color="{teamColor}" fontWeight="bold" fontSize="30" baselineShift="0" />
					<statistics:StatisticsScroller id="statisticsScroller"/>
					
					<!--<s:HGroup verticalAlign="bottom">
						<s:HGroup id="statRoller" width="400" height="113" verticalCenter="0" alpha="0">
							<s:RichEditableText  baselineShift="-3" backgroundAlpha="1"   lineHeight="90%" color="0xFFFFFF" id="statA_1"  text="{stat_POY}" verticalAlign="middle" width="{stat1_width}"   fontSize="28" height="113" fontFamily="StandardRegularAllCase" />
							<s:VGroup >
								<s:RichText id="statA_2" baselineShift="-5" backgroundAlpha="1" fontFamily="StandardRegularAllCase" color="0xffffff" lineHeight="90%" height="113" text="{stat_POY_years}" verticalAlign="middle"   visible="{stat_POY_years!=''}" trackingRight="-1" fontSize="{stat_POY_season!='' ? 93:fontSize_Year}" />
								<s:Spacer width="10" height="113" />
								<s:Label id="statA_3" baselineShift="-5" lineHeight="90%" height="113" text="{stat_POY_season}"  includeInLayout="{stat_POY_season!=''}" visible="{stat_POY_season!=''}" fontSize="40" fontFamily="StandardRegularAllCase"  />
							</s:VGroup>
						</s:HGroup>
						
						<s:HGroup verticalAlign="middle" height="113" id="goalgroup" alpha="0">
							<s:Spacer width="10" height="113" />
							<s:Line height="100%" width="1" >
								<s:stroke>
									<s:SolidColorStroke color="{teamColor}" weight="2" />
									
									</s:stroke>
							</s:Line>
							
							<s:Spacer width="1" height="113" />
							<s:Label id="statB_1" text="{stat_goals}" lineHeight="90%" paddingTop="15" trackingRight="-5" visible="{ 520 > statRoller.width ? 10 : 0 }" includeInLayout="{ 520 > statRoller.width ? 10 : 0 }" fontSize="93" />
							<s:Label id="statB_2" text="{stat_goals_for}" lineHeight="90%" paddingRight="5"  paddingTop="5" visible="{520 > statRoller.width ?true:false}" includeInLayout="{520 > statRoller.width ?true:false}"  fontSize="28" fontFamily="StandardRegularAllCase" />
							<s:Label id="statB_3" text="{stat_goals}" paddingTop="10" lineHeight="90%" trackingRight="-5" visible="{statRoller.width > 520 ? true:false}"  includeInLayout="{statRoller.width > 520 ? true:false}" fontSize="60" />
							<s:Label id="statB_4" text="{stat_goals_for}" paddingRight="0"  lineHeight="90%"  paddingTop="0" visible="{statRoller.width > 520? true:false}" includeInLayout="{statRoller.width > 520? true:false}" fontSize="18" fontFamily="StandardRegularAllCase" />
							<s:Spacer width="5" height="113" />
							<s:Line height="113" width="1">
								<s:stroke>
									<s:SolidColorStroke color="{teamColor}" weight="2" />
								</s:stroke>
							</s:Line>
						</s:HGroup>
					</s:HGroup>-->
					
					
					
				</s:VGroup>
				
			</s:BorderContainer>
			
			<s:HGroup gap="0" horizontalAlign="left">
				<s:Rect width="2" height="100%">
					<s:fill>
						<s:SolidColor  color="{teamColor}" />
					</s:fill>
				</s:Rect>
				<s:VGroup left="0" width="200" gap="0">				
					<s:Image smooth="true" width="200" scaleMode="zoom"  height="200" backgroundColor="0xFFFFFF" id="teamshot1" />
					<s:Image smooth="true" width="200" scaleMode="zoom" height="200" backgroundColor="0xFFFFFF" id="teamshot2" />
				</s:VGroup>	
			</s:HGroup>
			
		</s:HGroup>
	</s:VGroup>
	
</s:Group>
