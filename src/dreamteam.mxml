<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:views="views.*"
					   horizontalCenter="center" width="100%" height="100%" backgroundColor="#000000"
					   creationComplete="init(event)"  resize="onresize()"
					   addedToStage="fullscreen()" showStatusBar="false">

	<fx:Script>
		<![CDATA[
			import com.alfo.utils.Console;
			import com.greensock.TweenMax;
			
			import flash.events.ErrorEvent;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			
			import spark.filters.DropShadowFilter;
			
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import events.ApplicationEvent;
			import events.KioskError;
			import events.KioskEvent;
			import events.KioskProgressEvent;
			import events.KioskWaitEvent;
			import events.UserEvent;
			import events.ViewEvent;
			
			import model.Config;
			import model.ML;
			import model.MonitorConnection;
			
			import skins.vodafoneFormItem;
			
			import views.ApplicationType;
			import views.FaceBookAuth01;
			import views.Game;
			import views.SelectUserType;
			import views.Thankyou;
			import views.UserForm;
			import views.test;
			import views.components.ErrorAlert;
			import views.components.PasswordAlert;
			import views.components.ProgressPopUp;
			import views.components.pleaseWait;
			import views.components.tandcWindow;
			
			public var baseURL:String ="";
			public var facebookAppID:String ="";
			public var urn:int = 0;
			public var scoreFormat:String = "99:99"
			public var monitor:MonitorConnection;
			public var password:String;
			protected var pref:Config;
			protected var blinkTimer:Timer;
			
			public static var APPLICATION_TYPE_SELECT_GAME_OR_RESULT:String	= "SELECT_GAME_OR_RESULT";
			public static var APPLICATION_TYPE_REGISTRATION:String	 		= "REGISTRATION";
			public static var APPLICATION_TYPE_SELECT_TEAM:String			= "SELECT_TEAM";
			public static var APPLICATION_TYPE_GAME:String			 		= "GAME";
			public static var APPLICATION_TYPE_GAME_SELECT_USER:String	 	= "GAMESELECTUSER";
			public static var APPLICATION_TYPE_REGISTER_GAME:String	 		= "REGISTRATION_GAME";
			
			[Bindable]
			protected var loggedIn:Boolean = false;
			
			[Bindable]
			public var ApplicationType:String						 		= "GAME";
			
			[Bindable]
			public var barcode:String = null;
			
			[Bindable]
			public var score:Number = 0;
			
			[Bindable]
			public var isRegistered:String = "";
			public var userId:int = -1;
			public var userName:String = "";
			
			protected var optin_marketing:Boolean = false;
			protected var optin_terms:Boolean = false;
			
			protected var alertbox:ErrorAlert;
			protected var passwordbox:PasswordAlert;
			protected var tcWindow:tandcWindow;
			protected var progressWindow:ProgressPopUp;
			protected var popupWait:pleaseWait;
			
			
			[Bindable]
			protected var MAX_HEIGHT:int = 1080;
			
			[Bindable] 
			protected var MAX_WIDTH:int = 1920;
			
			[Bindable] 
			protected var RELATIVE_SCALE:Number =1;
			
			protected var MAX_RES_X:int = 0;
			protected var MAX_RES_Y:int = 0;
			
			public var data:Object = null;
			
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			
			private var skins_vodafoneFormItem_obj:skins.vodafoneFormItem;
			
			
			protected function fullscreen(e:Event=null):void
			{
				stage.displayState =  StageDisplayState.FULL_SCREEN_INTERACTIVE;
				
				stage.scaleMode = "noScale";
				this.reScaleMainContent();
			}
			// use this for bringing app to front: NativeApplication.nativeApplication.activate();
			
			protected function reScaleMainContent():void
			{
				screenScale();
				centerPopups();
				this.holder.scaleX = Math.min(1,scale);
				this.holder.scaleY = Math.min(1,scale);
				
				navigationbar.width = this.stage.stageWidth
				
				//this.navigationbar.scaleX = Math.min(1,scale);
				//this.navigationbar.scaleY = Math.min(1,scale);
				trace("SCALING TO:"+scale);
				//background
				trace("window TO:"+this.stage.stageHeight+" "+(this.holder.height+navigationbar.height));
				//background.y = scale*(this.holder.height+navigationbar.height-background.height);
				//background.bottom=0;
				trace("alfo TO:"+background.height+" "+(this.stage.stageHeight));
				//background.y=this.stage.stageHeight-background.height;
				//background.y=0;
				//horizontal scaling of navigation?
			}
			public function get scale():Number
			{
				
				//trace("SCALING TO:"+ MAX_WIDTH+"/"+this.stage.stageWidth+", "+ MAX_HEIGHT+"/"+this.stage.stageHeight);
				return Math.min( this.stage.stageWidth / MAX_WIDTH,  this.stage.stageHeight / (MAX_HEIGHT));
			}
			protected function onresize(e:Event=null):void
			{
				trace("*** RESIZE");
				try
				{
					this.reScaleMainContent();
					this.FaceBookAuth01.resizeWebApp();
					
				} catch (error:Error)
				{
					
				}
			}
			protected function screenScale():void
			{
				if (Capabilities.screenResolutionX!=MAX_RES_X || Capabilities.screenResolutionY!=MAX_RES_Y)
				{
					MAX_HEIGHT = MAX_HEIGHT;
					
					trace("INITIAL MAX_WIDTH:"+MAX_WIDTH);
					trace("INITIAL MAX_HEIGHT:"+MAX_HEIGHT);
					
					// if screen capability is smaller than design resolution do inital scale
					if (MAX_WIDTH > Capabilities.screenResolutionX || MAX_HEIGHT > Capabilities.screenResolutionY)
					{
						RELATIVE_SCALE = Math.min(1, Math.min(MAX_WIDTH/ Capabilities.screenResolutionX, MAX_HEIGHT/ (Capabilities.screenResolutionY)));
					}
					MAX_RES_X = Capabilities.screenResolutionX;
					MAX_RES_Y = Capabilities.screenResolutionY;
					trace("RELATIVE_SCALE:"+RELATIVE_SCALE);
					trace("screenResolutionX:"+Capabilities.screenResolutionX);
					trace("screenResolutionY:"+Capabilities.screenResolutionY);
					MAX_WIDTH  = MAX_WIDTH * RELATIVE_SCALE;
					MAX_HEIGHT = MAX_HEIGHT * RELATIVE_SCALE;
					trace("MAX_WIDTH:"+MAX_WIDTH);
					trace("MAX_HEIGHT:"+MAX_HEIGHT);
				}
			}
			protected function init(e:Event = null):void
			{
				Console.log("init", this);
				trace(File.applicationDirectory.nativePath);
				
				// navigation bar must be on top
				if (this.getElementIndex( navigationbar )< this.getElementIndex( contentholder) )
				{
					this.swapElements( navigationbar, contentholder);
				}
				pref = new Config();
				
				screenScale();
				
				
				baseURL =  "http://"+pref.prefsXML..serverIP+"/";
				facebookAppID = pref.prefsXML..facebookAppID;
				ApplicationType = pref.prefsXML..applicationtype.toUpperCase();
				urn = int(pref.prefsXML..urnLength);
				scoreFormat = pref.prefsXML..scoreFormat;
				password = pref.prefsXML..password;
				monitor =  new MonitorConnection(baseURL+"ping.php");
				
				checkUpdate();
				
				
				if (!monitor.hasEventListener( MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE))
					monitor.addEventListener( MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE, notifyNoInternet);
				if (!monitor.hasEventListener( MonitorConnection.EVENT_USER_IDLE_TIMEOUT))
					monitor.addEventListener( MonitorConnection.EVENT_USER_IDLE_TIMEOUT, notifyIdle);
				
				//Display connect symbol
				blinkTimer = new Timer( 1000 , 0 );
				blinkTimer.addEventListener( "timer" , toggleConnectIcon);
				blinkTimer.start();
				
				this.addEventListener( ApplicationEvent.SAVE_TYPE, notifyApplicationTypeUpdate );
				this.addEventListener( ApplicationEvent.LOGOUT, notifyApplicationLogout );
				
				this.addEventListener( KioskError.ERROR, error );
				this.addEventListener( ViewEvent.NAVIGATE, doNavigation );
				this.addEventListener( UserEvent.URN, setBarCode );
				
				this.addEventListener( KioskEvent.TERMS_NOTIFY, openTermsAndCondtions );
				this.addEventListener( KioskProgressEvent.NOTIFY, notifyProgress );
				this.addEventListener( KioskProgressEvent.UPDATE, notifyProgressUpdate );
				this.addEventListener( KioskProgressEvent.UPDATE_COMPLETE, notifyProgressComplete );
				this.addEventListener( KioskWaitEvent.NOTIFY, notifyWaiting );
				
				this.addEventListener( UserEvent.OPTIN_MARKETING, setMarketingOptin );
				this.addEventListener( UserEvent.OPTIN_TERMS, setTermsOptin );
				this.addEventListener( UserEvent.REGISTERED, setIsRegistered);
				
				
				this.addEventListener( "showDropShadow", showDropshadow );
				this.addEventListener( "hideDropShadow", hideDropshadow );
				trace(baseURL);
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
				
				navigationTimer = new Timer(200, 0);
				navigationTimer.addEventListener( TimerEvent.TIMER, checkNavigationHover );
				navigationTimer.start();
			}
			protected var navigationTimer:Timer;
			protected var navigationTimerCount:int=0;
			protected var navigationVisible:Boolean = false;
			protected function checkNavigationHover( e:Event = null ):void
			{
			//	Console.log(this.stage.mouseY+"<"+navigationbar.height+" "+navigationTimerCount, this)
				if (this.stage.mouseY<navigationbar.height)
				{
					navigationTimerCount = Math.min(navigationTimerCount+1,1);
				} else 
				{
					navigationTimerCount = Math.max(navigationTimerCount-1,0); 
				}
				if (navigationTimerCount==1)
				{
					if (!navigationVisible)
					{
					//	Console.log("Show Navigation", this)
						showNavigation();
						navigationVisible = true;
					}
				}
				if (navigationTimerCount==0)
				{
					if (navigationVisible)
					{
					//	Console.log("Hide Navigation", this)
						//hideNavigation()
					}
				}

			}
			protected function showNavigation( e:Event = null ):void
			{
				navigationVisible = true;
				TweenMax.to( navigationbar, .5, { alpha: 1, y: 0});
			}
			protected function hideNavigation( e:Event = null ):void
			{
				navigationVisible = false;
				TweenMax.to( navigationbar, .5, { alpha: 0, y:-navigationbar.height});
			}

			protected function notifyApplicationLogout( e:ApplicationEvent ):void
			{
				this.loggedIn = false;
				
			}
			protected function notifyApplicationTypeUpdate( e:ApplicationEvent ):void
			{
				
				
				pref.saveApplicationVariables( e.value );
				trace(pref.prefsXML);
				baseURL =  "http://"+pref.prefsXML..serverIP+"/";
				facebookAppID = pref.prefsXML..facebookAppID;
				ApplicationType = pref.prefsXML..applicationtype.toString().toUpperCase();
				urn = int(pref.prefsXML..urnLength);
				scoreFormat = pref.prefsXML..scoreFormat;
				trace("scoreformat is now: "+scoreFormat);
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
			}
			
			protected function clearPopups(e:Event=null):void
			{
				try
				{
					trace("*** CLEARING POPUPS");
					
					if (alertbox!=null)
					{
						if (!alertbox.isRemoving)
							PopUpManager.removePopUp(alertbox);
						
					}
					if (passwordbox!=null)
					{
						if (!passwordbox.isRemoving)
							PopUpManager.removePopUp(passwordbox);
						
					}
					if (tcWindow!=null)
					{
						if (!tcWindow.isRemoving)
							PopUpManager.removePopUp(tcWindow);
						
					}
					if (progressWindow!=null)
					{
						PopUpManager.removePopUp(progressWindow);
						
					}
					
					if (popupWait!=null)
					{
						PopUpManager.removePopUp(popupWait);
						
					}
					this.dispatchEvent( new ApplicationEvent( ApplicationEvent.POPUP_CLOSE ));
				} catch (error:Error)
				{
					trace("*** Error clearing popup - probably when user presses close:\n"+error.message)
				}
				
			}
			protected function getActivePopup():Array
			{
				var popups : Array = [];
				try
				{
					trace("*** CLEARING POPUPS");
					if (alertbox!=null)
					{
						popups.push(alertbox);
						
					}
					if (passwordbox!=null)
					{
						popups.push(passwordbox);
						
					}
					if (tcWindow!=null)
					{
						popups.push(tcWindow);
						
					}
					if (progressWindow!=null)
					{
						popups.push(progressWindow);
						
					}
					
					if (popupWait!=null)
					{
						popups.push(popupWait);
						
					}
				} catch (error:Error)
				{
				}
				return popups;
				
			}
			protected function centerPopups(e:Event=null):void
			{
				var p:Array = this.getActivePopup();
				for (var i:int=0;i<p.length;i++)
				{
					
					p[i].height *= scale;
					p[i].width *= scale;
					PopUpManager.centerPopUp(p[i]);
					p[i].height *= 1/scale;
					p[i].width *= 1/scale;
					p[i].scaleX = p[i].scaleY = scale;
					try {
						p[i].onresize();
					} catch (e:Error)
					{
						
					}
					
					
					
					
				}
				
			}
			
			
			protected function notifyWaiting( e:KioskWaitEvent = null ):void
			{
				clearPopups();
				
				popupWait = new pleaseWait();
				popupWait.message = e.message;
				PopUpManager.addPopUp(popupWait, this, true) ;
				PopUpManager.centerPopUp(popupWait);
				centerPopups();
				
			}
			protected function notifyProgressComplete( e:KioskProgressEvent = null):void
			{
				clearPopups();
			}
			protected function notifyProgress( e:KioskProgressEvent = null):void
			{
				
				clearPopups();
				
				progressWindow = new ProgressPopUp();
				progressWindow.windowTitle = e.title;
				progressWindow.message = e.message;
				progressWindow.exitFunction = e.exitFunction;
				PopUpManager.addPopUp(progressWindow, this, true);
				PopUpManager.centerPopUp(progressWindow);
				centerPopups();
			}
			
			protected function notifyProgressUpdate( e:KioskProgressEvent = null):void
			{
				
				
				if (progressWindow==null)
				{
					notifyProgress(e);
					
				} else
				{
					progressWindow.message = e.message;
				}
				
			}
			protected function openTermsAndCondtions( e:KioskEvent = null):void
			{
				trace("openTermsAndCondtions");
				
				clearPopups();
				tcWindow = new tandcWindow();
				tcWindow.scaleX = tcWindow.scaleY = this.scale;
				tcWindow.exitFunction = e.exitFunction;
				
				PopUpManager.addPopUp(tcWindow, this, true);
				PopUpManager.centerPopUp(tcWindow);
				centerPopups();
			}
			protected function gotoView( stackStr:String="", obj:Object=null ) :void
			{
				var indexSeq:Array = ["SelectGameOrResult", "SelectTeam", "Game", "SelectUserType", "FaceBookAuth01", "UserForm", "PhotoUserSelect",  "SelectApplication", "Thankyou", "FaceBookLogoutOverride", "Teamsheets"]
				var lastScreen:DisplayObject;
				var nextScreen:DisplayObject;
				var nextIndex:int=-1;
				
				try
				{
					lastScreen = (VBox(this.Stack.getChildAt(this.Stack.selectedIndex)).getChildAt(0));
					
					//	lastScreen.dispatchEvent( new Event("exit"));
				} catch (error:Error)
					
				{
					
				}
				
				Console.log( stackStr, this );
				
				for (var i:int=0;i<indexSeq.length;i++)
				{
					if	(indexSeq[i]==stackStr)
					{
						data = obj;
						nextIndex = i;
						if (stackStr == "SelectGameOrResult")
						{
							nextScreen = SelectGameOrResult;
						}
						if (stackStr == "SelectTeam")
						{
							nextScreen = SelectTeam;
						}
						if (stackStr == "SelectUserType")
						{
							nextScreen = SelectUserType;
						}
						if (stackStr == "FaceBookAuth01")
						{
							nextScreen = FaceBookAuth01;
						}
						if (stackStr == "PhotoUserSelect")
						{
							nextScreen = GameUserSelect;
						}
						if (stackStr == "UserForm")
						{
							nextScreen = UserForm;
						}
						if (stackStr == "Game")
						{
							nextScreen = Game;
						}
						if (stackStr == "SelectApplication")
						{
							nextScreen = SelectApplication;
						}
						if (stackStr == "Thankyou")
						{
							nextScreen = Thankyou;
						}
						if (stackStr == "FaceBookLogoutOverride")
						{
							nextScreen = FaceBookLogoutOverride;
						}
						if (stackStr == "Teamsheets")
						{
							Console.log( "Here", this );
							nextScreen = Teamsheets;
						}
						
					}
				}
				//Console.log("Nextscreen "+getQualifiedClassName(nextScreen), this);
				if (stackStr=="Previous")
				{
					gotoView( indexSeq[ Stack.selectedIndex-1], obj );
				}
				
				// ENSURE LAST SCREEN CALLS EXIT
				if (lastScreen!=null)
				{
					Console.log("We are dispatching an EXIT event to "+getQualifiedClassName(lastScreen), this);	
					lastScreen.dispatchEvent( new FlexEvent(FlexEvent.REMOVE) );
				}
				
				// ENSURE NEXT SCREEN CALLS INIT
				if (nextScreen!=null)
				{
					Console.log("We dispatching an INIT event to "+getQualifiedClassName(nextScreen), this);
					nextScreen.dispatchEvent( new Event( Event.INIT ) );
					
				}
				
				// GO TO NEXT STACK ITEM
				if (nextIndex>-1)
				{
					Stack.selectedIndex = nextIndex;
				}
			}
			
			//NAVIGATION HANDLING BETWEEN VIEWS
			protected function doNavigation(e:ViewEvent):void
			{
				Console.log(e.location, this);
				clearPopups();
				hideDropshadow();
				switch (e.location)
				{
					case ViewEvent.LOCATION_RESTART:
						//this.navigator.popToFirstView(fadeTrans);
						trace("*** RESTART WAS CALLED ***");
						//	gotoView("ScanWristBand");
						if (this.ApplicationType == APPLICATION_TYPE_REGISTRATION || this.ApplicationType == APPLICATION_TYPE_REGISTER_GAME)
						{
							isRegistered = null;
							gotoView("SelectGameOrResult");
							
						} else
						{
							
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_SELECT_GAME_OR_RESULT ));
							
//							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_SELECT_USER_TYPE ));
							//this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_TEAMSHEETS, {team: "Aston Villa"} ));
							//this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME, {team: "West Brom"} ));
							//this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_FACEBOOK, {urn: 'XXXXXX', optin_marketing: false, optin_terms: true} ));
						}
						
						break;
					
					case ViewEvent.LOCATION_CONFIG:
						gotoView("SelectApplication", { xml : pref.prefsXML } );
						break;
					case ViewEvent.LOCATION_SELECT_GAME_OR_RESULT:
						gotoView("SelectGameOrResult", { xml : pref.prefsXML } );
						break
					case ViewEvent.LOCATION_TEAMSHEETS:
						gotoView("Teamsheets", e.object);
						break
					case ViewEvent.LOCATION_SELECT_USER_TYPE:
						if (this.isRegistered)
						{
							if (this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
							{
								
								showError("YOU HAVE ALREADY REGISTERED.", "USER REGISTERED");
								//ScanWristBand.init();
							} else 
							{
								this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
							}
						} else
						{
							gotoView("SelectUserType");
						}
						break;
					case ViewEvent.LOCATION_FACEBOOK:
						
						if (!isFacebookRegistered  || this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
						{
							gotoView("FaceBookAuth01", {urn: barcode, optin_marketing: this.optin_marketing, optin_terms: this.optin_terms});
						} else
						{
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
						}
						break;
					case ViewEvent.LOCATION_STANDARD_REGISTRATION:
						if (!isStandardRegistered || this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
						{
							gotoView("UserForm", {urn: barcode, optin_marketing: this.optin_marketing, optin_terms: this.optin_terms});
						} else
						{
							
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
							
						}
						break;
					case ViewEvent.LOCATION_FACEBOOK_FORCELOGOUT:
						gotoView("FaceBookLogoutOverride",  e.object);
						
						break;
					
					case ViewEvent.LOCATION_FACEBOOK_REGISTERED:
						trace("User has registered on facebook");
						this.dispatchEvent( new UserEvent(UserEvent.REGISTERED, "facebook"));
						this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_REGISTRATION_COMPLETE ));
						
						//	this.navigator.pushView(views.ExtraInfo, {urn: barcode});
						break;
					case ViewEvent.LOCATION_REGISTRATION_COMPLETE:
						trace("Registration of user is complete");
						
						if (this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
						{
							gotoView("Thankyou", {urn: barcode});
						} else if (this.ApplicationType == APPLICATION_TYPE_REGISTER_GAME)
						{
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
						} else {
							
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
						}
						
						break;
					case ViewEvent.LOCATION_PHOTO_SELECTED_USER:
						gotoView("CameraCapture", e.object);
						break;
					case ViewEvent.LOCATION_SELECT_TEAM:
						
						gotoView("SelectTeam", e.object );
						break;
					case ViewEvent.LOCATION_RESULT:
						showError("RESULTS TO BE IMPLEMENTED");
						break;
					case ViewEvent.LOCATION_GAME:
						trace("ENTERING THE GAME "+ApplicationType);
						
						if (ApplicationType == APPLICATION_TYPE_GAME)
						{
							//showError("GAME TO BE IMPLEMENTED");
							gotoView("Game", e.object);
						/*	
							if (this.isFacebookRegistered)
							{
								gotoView("CameraCapture", {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered});
							} else
							{
								//gotoView("ScanWristBand");
								showError("USER NOT REGISTERED WITH FACEBOOK ACCOUNT", "FACEBOOK ACCOUNT REQUIRED", this.defaultView);
							}
							*/
							
						} else if  (ApplicationType == APPLICATION_TYPE_GAME_SELECT_USER )
						{
							//showError("GAME: BRAND AMBASSADOR TAKES NOTES DOWN WHEN USER COMPLETES AN ACTIVITY", "NOT IMPLEMENTED");
							gotoView("PhotoUserSelect",  {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered});
							
						} else if  ( this.ApplicationType == APPLICATION_TYPE_REGISTER_GAME)
						{
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_PHOTO_SELECTED_USER, {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered, id: this.userId, userName: this.userName } ));
							
						} else 
						{
							gotoView("ScanWristBand");
							showError("UNKNOWN ACTIVTIY : '"+e.location+"'", "NOT IMPLEMENTED");
							
						}
						break;
					case ViewEvent.LOCATION_GAME_COMPLETE:
						gotoView("Thankyou");
						break;
					default:
						
				}
				
				
				
			}
			protected function error(e:KioskError=null):void
			{
				trace("Error: "+e.message);
				showError(e.message, e.title, e.exitFunction);
			}
			protected function toggleConnectIcon(e:Event):void
			{
				if ( connStatus.visible )
				{            
					connStatus.visible = false;                
				} else if (!monitor.isConnected()) 
				{            
					connStatus.visible = true;                
				}      
			}
			
			protected function notifyIdle(e:Event):void
			{
				//defaultState();
				if (this.ApplicationType == APPLICATION_TYPE_GAME)
				{
					Console.log("Timeout but in GAME so not resetting", this);
				} else 
				{
					defaultView();
					Console.log("Idle too long - resetting", this);
	
				}
			}
			protected function notifyNoInternet(e:Event):void
			{
				
				//defaultState();
				defaultView();
				monitor.removeEventListener( MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE, notifyNoInternet);
				monitor.addEventListener( MonitorConnection.EVENT_INTERNET_AVAILABLE, notifyInternet);
				//showError("SORRY - NO INTERNET CONNECTION", "CONNECTION ERROR");
			}
			protected function notifyInternet(e:Event):void
			{
				monitor.addEventListener( MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE, notifyNoInternet);
				monitor.removeEventListener( MonitorConnection.EVENT_INTERNET_AVAILABLE, notifyInternet);
				
				
				if (alertbox!=null)
				{
					if (alertbox.windowTitle == "CONNECTION ERROR")
					{
						PopUpManager.removePopUp(alertbox);
						
						/*
						if (currentState == "Scan")
						{
						if (highscore!=null)
						{
						highscore.init();
						}
						}
						*/
					}
				}
				defaultView();
				
			}
			protected function showError(msg:String="", title:String="", exitFunction:Function=null):void
			{
				//Alert.show(msg, title, 4, null, exitApplicationFunction);
				
				clearPopups();
				alertbox = new ErrorAlert();
				alertbox.message = msg;
				alertbox.windowTitle = title;
				alertbox.exitFunction = exitFunction;
				
				PopUpManager.addPopUp(alertbox, this, true);
				PopUpManager.centerPopUp(alertbox);
				centerPopups();
				
			}
			protected function showPassword(title:String="", password:String=null, exitFunction:Function=null):void
			{
				clearPopups();
				
				passwordbox = new PasswordAlert();
				passwordbox.windowTitle = title;
				passwordbox.password = password;
				passwordbox.exitFunction = exitFunction;
				
				PopUpManager.addPopUp(passwordbox, this, true);
				PopUpManager.centerPopUp(passwordbox);
				this.dispatchEvent( new ApplicationEvent( ApplicationEvent.POPUP_OPEN ) );
				centerPopups();
			}
			protected function defaultView(e:Event=null):void
			{
				trace("default view")
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
				
			}
			protected function config(event:MouseEvent=null):void
			{
				if (loggedIn)
				{
					this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_CONFIG ));
					
				} else {
					showPassword("Please enter password", password, login)
				}
			}
			protected function login( e:Event=null ):void
			{
				this.loggedIn = true;
				config();
				
			}
			protected function exitApplication(event:MouseEvent=null):void
			{
				NativeApplication.nativeApplication.exit();
			}
			protected function setBarCode(e:UserEvent):void
			{
				barcode = e.urn;
				trace("recorded barcode:"+barcode);
			}
			protected function setScore(e:UserEvent):void
			{
				score = e.score;
			}
			protected function setIsRegistered(e:UserEvent):void
			{
				this.isRegistered =  (e.userType)
				this.userId = e.id;
				this.userName = e.name;
				trace("recorded isRegistered: "+this.isRegistered.toString());
			}
			public function get isFacebookRegistered():Boolean
			{
				return this.isRegistered =="facebook";
			}
			public function get isStandardRegistered():Boolean
			{
				return this.isRegistered =="classic";
			}
			
			protected function get ApplicationTypeNumber():int
			{
				switch (this.ApplicationType)
				{
					case APPLICATION_TYPE_GAME:
						return 3;
						break;
					default:
						return -1;
				}
			}
			
			
			protected function setMarketingOptin( e:UserEvent ):void
			{
				trace("markting:"+e.optin_marketing);
				optin_marketing = e.optin_marketing
			}
			protected function setTermsOptin( e:UserEvent ):void
			{
				trace("terms:"+e.optin_terms);
				optin_terms = e.optin_terms;
			}
			
			protected function showDropshadow( e:Event = null ):void
			{
				
				hideDropshadow();
				if (scale<1)
				{
					borderHolder.filters = [ new spark.filters.DropShadowFilter(10,45, 0 ,.5, 10,10) ];
				}
			}
			
			protected function hideDropshadow( e:Event = null ):void
			{
				borderHolder.filters = [ ];
			}
			
			protected function setLogin( e:Event ):void
			{
				this.loggedIn = (e.type=="login");
				
			}
			
			
			public function isEmbedded(fontName:String):Boolean {
				var tf:TextFormat = new TextFormat();
				tf.font = fontName;
				trace(fontName+": "+FlexGlobals.topLevelApplication.systemManager.isFontFaceEmbedded(tf).toString());
				return FlexGlobals.topLevelApplication.systemManager.isFontFaceEmbedded(tf);
			}
			
			
			/// code for the update
			
			private function checkUpdate():void {
				Console.log("Checking for update...", this);
				setApplicationVersion();
				// we set the URL for the update.xml file
//				appUpdater.configurationFile = new File("app:/updateConfig.xml");
//				appUpdater.initialize();
				appUpdater.updateURL = "http://c-lab.co.uk/clients/dreamteam/update.xml";//this.baseURL+"air/update.xml";
				//we set the event handlers for INITIALIZED nad ERROR
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.addEventListener(ErrorEvent.ERROR, onError);
				//we can hide the dialog asking for permission for checking for a new update;
				//if you want to see it just leave the default value (or set true).
				appUpdater.isCheckForUpdateVisible = false;
				//we initialize the updater
				appUpdater.initialize();
			}
			
			/**
			 * Handler function triggered by the ApplicationUpdater.initialize;
			 * The updater was initialized and it is ready to take commands 
			 * (such as <code>checkNow()</code>
			 * @param UpdateEvent 
			 */
			private function onUpdate(event:UpdateEvent):void {
				//start the process of checking for a new update and to install
				Console.log("Start update check", this);
				appUpdater.checkNow();
				
			}
			
			/**
			 * Handler function for error events triggered by the ApplicationUpdater.initialize
			 * @param ErrorEvent 
			 */
			private function onError(event:ErrorEvent):void {
				Console.log("Error during update", this);
				Alert.show(event.toString());
			}
			
			/**
			 * A simple code just to read the current version of the application 
			 * and display it in a label. 
			 */
			private function setApplicationVersion():void {
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
				//lblAppVersion.text = "App version: " + appXML.ns::version;
			}
			
			

		]]>
	</fx:Script>
	<fx:Declarations>
		

	<s:Parallel id="hideFX" duration="400">
		
		<mx:Blur blurXFrom="100.0" blurXTo="5.0" />
		<mx:Move xTo="{Stack.width}"/>
		
	</s:Parallel>
	
	<s:Parallel id="showFX" duration="400">
		
		<mx:Blur blurXFrom="100.0" blurXTo="0.0" />
		<mx:Move xFrom="{-Stack.width}"/>
		
	</s:Parallel>
	
	</fx:Declarations>
	<fx:Style source="assets/css/Main.css" />
	<fx:Style source="assets/css/Fonts.css" />
	
	
	
	<s:VGroup id="background"  width="100%" height="100%" verticalAlign="bottom" >
		<s:Image verticalAlign="bottom"  width="100%" height="100%" click="fullscreen()"
				 smooth="true" smoothingQuality="high" alpha="0" source="assets/images/BG.jpg"/>
	</s:VGroup>
	
	<s:BorderContainer id="navigationbar" alpha="0" includeInLayout="false" borderAlpha="0" width="{this.stage.stageWidth}" height="90" click="fullscreen(event)">
		<s:backgroundFill>
			
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" alpha=".5"/>
				<s:GradientEntry color="0x000000" alpha=".1"/>
			</s:LinearGradient>
		</s:backgroundFill>
		<s:HGroup verticalAlign="middle" width="100%" height="90">
			<s:HGroup left="20" paddingLeft="20">
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/logo_live_small.png')" click="{defaultView()}"/>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="right" paddingRight="0" verticalAlign="middle" height="90">
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/nm-no-connection.gif')" id="connStatus" label="{ML.t('NO CONNECTION')}" color="0xFFFFFF" visible="false" />
				
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/home_logo.png')" click="{defaultView()}"/>
				
				<s:Button skinClass="skins.BasicButton" styleName="nav" label="{ML.t('Quit')}" click="exitApplication(event)" id="quitButton" color="0xFFFFFF" visible="{loggedIn}" includeInLayout="{loggedIn}" />
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/padlock.png')" click="config(event)" color="0xFFFFFF" />
			</s:HGroup>		
			
			
			
			
		</s:HGroup>
		
	</s:BorderContainer>
	
	
	<s:VGroup id="contentholder" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
		
		
		<s:Group id="holder" width="{MAX_WIDTH}" height="{MAX_HEIGHT}">
			
			<s:BorderContainer id="borderHolder" width="100%"  height="100%" backgroundAlpha="0" borderVisible="false">
				
				
				
				<mx:ViewStack id="Stack" height="100%" width="100%"  creationPolicy="all">
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:SelectGameOrResult id="SelectGameOrResult" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:SelectTeam id="SelectTeam" />
					</mx:VBox>

					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:Game id="Game" />
					</mx:VBox>

					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:SelectUserType id="SelectUserType" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}" verticalAlign="top"  showEffect="{showFX}">
						<views:FaceBookAuth01 id="FaceBookAuth01" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:UserForm id="UserForm" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:GameSelectUser id="GameUserSelect"  />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:ApplicationType id="SelectApplication" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:Thankyou id="Thankyou" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:FaceBookLogoutOverride id="FaceBookLogoutOverride" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:Teamsheet id="Teamsheets" />
					</mx:VBox>

				</mx:ViewStack>
			</s:BorderContainer>
			
		</s:Group>
	</s:VGroup>
	

</s:WindowedApplication>
