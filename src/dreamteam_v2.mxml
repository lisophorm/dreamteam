<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:views="views.*"
					   horizontalCenter="center"  backgroundColor="#000000"
					   initialize="videoSettings(event)"
					   creationComplete="init(event)"  resize="onresize()"
					   addedToStage="fullscreen()" showStatusBar="false" 
					   xmlns:registration="registration.*" 
					   xmlns:debug="registration.debug.*"
					   alwaysInFront="false">
	
	<fx:Style source="assets/css/Main.css" />
	<fx:Style source="assets/css/Fonts.css" />	
	
	<fx:Declarations>
		
		<s:Parallel id="hideFX" duration="400">
			<s:Fade alphaTo="0.0"/>
		</s:Parallel>
		
		<s:Parallel id="showFX" duration="400">
			<s:Fade alphaTo="1.0"/>
		</s:Parallel>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import events.ApplicationEvent;
			import events.KioskError;
			import events.KioskEvent;
			import events.KioskProgressEvent;
			import events.KioskWaitEvent;
			import events.UserEvent;
			import events.ViewEvent;
			
			import model.Config;
			import model.ML;
			import model.MonitorConnection;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.osmf.utils.OSMFSettings;
			
			import registration.debug.DebugEvent;
			
			import skins.vodafoneFormItem;
			
			import spark.filters.DropShadowFilter;
			
			import views.components.ErrorAlert;
			import views.components.PasswordAlert;
			import views.components.ProgressPopUp;
			import views.components.pleaseWait;
			import views.components.tandcWindow;
			
			public var baseURL:String ="";
			public var facebookAppID:String ="";
			public var urn:int = 0;
			public var scoreFormat:String = "99:99"
			public var monitor:MonitorConnection;
			public var password:String;
			protected var pref:Config;
			protected var blinkTimer:Timer;
			
			public static var APPLICATION_TYPE_SELECT_GAME_OR_RESULT:String	= "SELECT_GAME_OR_RESULT";
			public static var APPLICATION_TYPE_REGISTRATION:String	 		= "REGISTRATION";
			public static var APPLICATION_TYPE_SELECT_TEAM:String			= "SELECT_TEAM";
			public static var APPLICATION_TYPE_GAME:String			 		= "GAME";
			public static var APPLICATION_TYPE_GAME_SELECT_USER:String	 	= "GAMESELECTUSER";
			public static var APPLICATION_TYPE_REGISTER_GAME:String	 		= "REGISTRATION_GAME";
			
			[Bindable]
			protected var loggedIn:Boolean = false;
			
			[Bindable]
			public var ApplicationType:String						 		= "GAME";
			
			[Bindable]
			public var barcode:String = null;
			
			[Bindable]
			public var score:Number = 0;
			
			[Bindable]
			public var isRegistered:String = "";
			public var userId:int = -1;
			public var userName:String = "";
			
			protected var optin_marketing:Boolean = false;
			protected var optin_terms:Boolean = false;
			
			protected var alertbox:ErrorAlert;
			protected var passwordbox:PasswordAlert;
			protected var tcWindow:tandcWindow;
			protected var progressWindow:ProgressPopUp;
			protected var popupWait:pleaseWait;
			
			[Bindable]
			protected var MAX_HEIGHT:int = 1080;
			
			[Bindable] 
			protected var MAX_WIDTH:int = 1920;
			
			[Bindable] 
			protected var RELATIVE_SCALE:Number =1;
			
			protected var MAX_RES_X:int = 0;
			protected var MAX_RES_Y:int = 0;
			
			public var data:Object = null;
			
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			
			private var skins_vodafoneFormItem_obj:skins.vodafoneFormItem;
			
			protected var debugKeySequence : Array = [71,85,66,69,68];
			protected var runningKeySequence : Array = [];
			public var localURL:String;
			
			
			
			
			protected function fullscreen(e:Event=null):void
			{
				stage.displayState =  StageDisplayState.FULL_SCREEN_INTERACTIVE;
				
				stage.addEventListener(KeyboardEvent.KEY_DOWN, typingHandler); 
				
				stage.scaleMode = "noScale";
				this.reScaleMainContent();
			}
			
			protected function reScaleMainContent():void
			{
				screenScale();
				centerPopups();
				
				this.holder.scaleX = Math.min(1,scale);
				this.holder.scaleY = Math.min(1,scale);
				
				navigationbar.width = this.stage.stageWidth
			}
			
			public function get scale():Number
			{
				return Math.min( this.stage.stageWidth / MAX_WIDTH,  this.stage.stageHeight / (MAX_HEIGHT));
			}
			
			protected function onresize(e:Event=null):void
			{
				try
				{
					this.reScaleMainContent();
					this.FaceBookAuth01.resizeWebApp();
					
				} catch (error:Error)
				{
					
				}
			}
			
			protected function screenScale():void
			{
				if (Capabilities.screenResolutionX!=MAX_RES_X || Capabilities.screenResolutionY!=MAX_RES_Y)
				{
					MAX_HEIGHT = MAX_HEIGHT;
					
					if (MAX_WIDTH > Capabilities.screenResolutionX || MAX_HEIGHT > Capabilities.screenResolutionY)
					{
						RELATIVE_SCALE = Math.min(1, Math.min(MAX_WIDTH/ Capabilities.screenResolutionX, MAX_HEIGHT/ (Capabilities.screenResolutionY)));
					}
					MAX_RES_X = Capabilities.screenResolutionX;
					MAX_RES_Y = Capabilities.screenResolutionY;
					MAX_WIDTH  = MAX_WIDTH * RELATIVE_SCALE;
					MAX_HEIGHT = MAX_HEIGHT * RELATIVE_SCALE;
				}
			}
			
			protected function init(e:Event = null):void
			{
				
				if(Updater.isSupported) {
					trace("checking update")
					checkUpdate();
				} else {
					trace("update not supported");
				}
				
				/*Mouse.hide();*/
				
				if (this.getElementIndex( navigationbar )< this.getElementIndex( contentholder) )
				{
					this.swapElements( navigationbar, contentholder);
				}
				pref = new Config();
				
				screenScale();
				
				baseURL =  "http://"+pref.prefsXML..serverIP+"/";
				localURL = "http://"+pref.prefsXML..localIP+"/";
				facebookAppID = pref.prefsXML..facebookAppID;
				ApplicationType = pref.prefsXML..applicationtype.toUpperCase();
				urn = int(pref.prefsXML..urnLength);
				scoreFormat = pref.prefsXML..scoreFormat;
				//password = pref.prefsXML..password;
				password="123";
				monitor =  new MonitorConnection(localURL+"ping.php");
				checkUpdate();
				
				this.addEventListener( ApplicationEvent.SAVE_TYPE, notifyApplicationTypeUpdate );
				this.addEventListener( ApplicationEvent.LOGOUT, notifyApplicationLogout );
				
				this.addEventListener( KioskError.ERROR, error );
				this.addEventListener( ViewEvent.NAVIGATE, doNavigation );
				this.addEventListener( UserEvent.URN, setBarCode );
				
				this.addEventListener( KioskEvent.TERMS_NOTIFY, openTermsAndCondtions );
				this.addEventListener( KioskProgressEvent.NOTIFY, notifyProgress );
				this.addEventListener( KioskProgressEvent.UPDATE, notifyProgressUpdate );
				this.addEventListener( KioskProgressEvent.UPDATE_COMPLETE, notifyProgressComplete );
				this.addEventListener( KioskWaitEvent.NOTIFY, notifyWaiting );
				
				this.addEventListener( UserEvent.OPTIN_MARKETING, setMarketingOptin );
				this.addEventListener( UserEvent.OPTIN_TERMS, setTermsOptin );
				this.addEventListener( UserEvent.REGISTERED, setIsRegistered);
				
				this.addEventListener( "showDropShadow", showDropshadow );
				this.addEventListener( "hideDropShadow", hideDropshadow );
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
				
				//debugPanel.registrationModule = RegistrationView.device;
			}
			
			protected function notifyApplicationLogout( e:ApplicationEvent ):void
			{
				this.loggedIn = false;
			}
			
			protected function notifyApplicationTypeUpdate( e:ApplicationEvent ):void
			{
				pref.saveApplicationVariables( e.value );
				baseURL =  "http://"+pref.prefsXML..serverIP+"/";
				facebookAppID = pref.prefsXML..facebookAppID;
				localURL= "http://"+pref.prefsXML..localIP+"/";
				ApplicationType = pref.prefsXML..applicationtype.toString().toUpperCase();
				urn = int(pref.prefsXML..urnLength);
				scoreFormat = pref.prefsXML..scoreFormat;
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
			}
			
			protected function clearPopups(e:Event=null):void
			{
				try
				{
					if (alertbox!=null)
					{
						if (!alertbox.isRemoving)
							PopUpManager.removePopUp(alertbox);
						
					}
					if (passwordbox!=null)
					{
						if (!passwordbox.isRemoving)
							PopUpManager.removePopUp(passwordbox);
						
					}
					if (tcWindow!=null)
					{
						if (!tcWindow.isRemoving)
							PopUpManager.removePopUp(tcWindow);
						
					}
					if (progressWindow!=null)
					{
						PopUpManager.removePopUp(progressWindow);
						
					}
					
					if (popupWait!=null)
					{
						PopUpManager.removePopUp(popupWait);
						
					}
					this.dispatchEvent( new ApplicationEvent( ApplicationEvent.POPUP_CLOSE ));
				} catch (error:Error)
				{
					trace("*** Error clearing popup - probably when user presses close:\n"+error.message)
				}
			}
			
			protected function getActivePopup():Array
			{
				var popups : Array = [];
				try
				{
					if (alertbox!=null)
					{
						popups.push(alertbox);
						
					}
					if (passwordbox!=null)
					{
						popups.push(passwordbox);
						
					}
					if (tcWindow!=null)
					{
						popups.push(tcWindow);
						
					}
					if (progressWindow!=null)
					{
						popups.push(progressWindow);
						
					}
					
					if (popupWait!=null)
					{
						popups.push(popupWait);
						
					}
				} catch (error:Error)
				{
				}
				return popups;
			}
			
			protected function centerPopups(e:Event=null):void
			{
				
				var p:Array = this.getActivePopup();
				
				for (var i:int=0; i<p.length; i++)
				{
					p[i].height *= scale;
					p[i].width *= scale;
					PopUpManager.centerPopUp(p[i]);
					p[i].height *= 1/scale;
					p[i].width *= 1/scale;
					p[i].scaleX = p[i].scaleY = scale;
					try {
						p[i].onresize();
					} catch (e:Error)
					{
						
					}
				}
				
			}
			
			protected function notifyWaiting( e:KioskWaitEvent = null ):void
			{
				clearPopups();
				popupWait = new pleaseWait();
				popupWait.message = e.message;
				PopUpManager.addPopUp(popupWait, this, true) ;
				PopUpManager.centerPopUp(popupWait);
				centerPopups();
			}
			
			protected function notifyProgressComplete( e:KioskProgressEvent = null):void
			{
				clearPopups();
			}
			
			protected function notifyProgress( e:KioskProgressEvent = null):void
			{
				clearPopups();
				
				progressWindow = new ProgressPopUp();
				progressWindow.windowTitle = e.title;
				progressWindow.message = e.message;
				progressWindow.exitFunction = e.exitFunction;
				PopUpManager.addPopUp(progressWindow, this, true);
				PopUpManager.centerPopUp(progressWindow);
				centerPopups();
			}
			
			protected function notifyProgressUpdate( e:KioskProgressEvent = null):void
			{
				if (progressWindow==null)
				{
					notifyProgress(e);
					
				} else
				{
					progressWindow.message = e.message;
				}
				
			}
			protected function openTermsAndCondtions( e:KioskEvent = null):void
			{
				clearPopups();
				tcWindow = new tandcWindow();
				tcWindow.scaleX = tcWindow.scaleY = this.scale;
				tcWindow.exitFunction = e.exitFunction;
				
				PopUpManager.addPopUp(tcWindow, this, true);
				PopUpManager.centerPopUp(tcWindow);
				centerPopups();
			}
			
			protected function gotoView( stackStr:String="", obj:Object=null ) :void
			{
				var indexSeq:Array = ["SelectGameOrResult", "TeamCarousel", "Game", "SelectUserType", "FaceBookAuth01", "UserForm", "PhotoUserSelect",  "SelectApplication", "Thankyou", "FaceBookLogoutOverride", "Teamsheets", "Registration", "SelectRegistrationTeam", "WelcomeBack"]
				var lastScreen:DisplayObject;
				var nextScreen:DisplayObject;
				var nextIndex:int=-1;
				
				try
				{
					lastScreen = (VBox(this.Stack.getChildAt(this.Stack.selectedIndex)).getChildAt(0));
				} catch (error:Error)
				{
					
				}
				
				
				for (var i:int=0;i<indexSeq.length;i++)
				{
					if	(indexSeq[i]==stackStr)
					{
						data = obj;
						nextIndex = i;
						if (stackStr == "SelectGameOrResult")
						{
							nextScreen = SelectGameOrResult;
						}
						if (stackStr == "TeamCarousel")
						{
							nextScreen = TeamCarousel;
						}
						if (stackStr == "SelectUserType")
						{
							nextScreen = SelectUserType;
						}
						if (stackStr == "FaceBookAuth01")
						{
							nextScreen = FaceBookAuth01;
						}
						if (stackStr == "PhotoUserSelect")
						{
							nextScreen = GameUserSelect;
						}
						if (stackStr == "UserForm")
						{
							nextScreen = UserForm;
						}
						if (stackStr == "Game")
						{
							nextScreen = Game;
						}
						if (stackStr == "SelectApplication")
						{
							nextScreen = SelectApplication;
						}
						if (stackStr == "Thankyou")
						{
							nextScreen = Thankyou;
						}
						if (stackStr == "FaceBookLogoutOverride")
						{
							nextScreen = FaceBookLogoutOverride;
						}
						if (stackStr == "Teamsheets")
						{
							nextScreen = Teamsheets;
						}
						if(stackStr == "Registration")
						{
							nextScreen = RegistrationView;
						}
						if(stackStr == "SelectRegistrationTeam")
						{
							nextScreen = SelectRegistrationTeam;
						}
						if(stackStr == "WelcomeBack")
						{
							nextScreen = WelcomeBack;
						}
					}
				}
				if (stackStr=="Previous")
				{
					gotoView( indexSeq[ Stack.selectedIndex-1], obj );
				}
				
				if (lastScreen!=null)
				{
					lastScreen.dispatchEvent( new FlexEvent(FlexEvent.REMOVE) );
				}
				
				if (nextScreen!=null)
				{
					nextScreen.dispatchEvent( new Event( Event.INIT ) );
				}
				
				if (nextIndex>-1)
				{
					Stack.selectedIndex = nextIndex;
				}
			}
			
			protected function doNavigation(e:ViewEvent):void
			{
				
				trace("DO NAV APPTYPEL:"+this.ApplicationType);
				trace("DO NAV e.location:"+e.location);
				
				
				clearPopups();
				hideDropshadow();
				switch (e.location)
				{
					case ViewEvent.LOCATION_RESTART:
						this.loggedIn=false;
						quitButton.visible=false;
						if (this.ApplicationType == APPLICATION_TYPE_REGISTRATION || this.ApplicationType == APPLICATION_TYPE_REGISTER_GAME)
						{
							isRegistered = null;
							gotoView("SelectGameOrResult");
						} else
						{
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_SELECT_GAME_OR_RESULT ));
						}
						
						break;
					
					case ViewEvent.LOCATION_CONFIG:
						gotoView("SelectApplication", { xml : pref.prefsXML } );
						break;
					case ViewEvent.LOCATION_SELECT_GAME_OR_RESULT:
						gotoView("SelectGameOrResult", { xml : pref.prefsXML } );
						break
					case ViewEvent.LOCATION_TEAMSHEETS:
						gotoView("Teamsheets", e.object);
						break
					case ViewEvent.LOCATION_SELECT_USER_TYPE:
						if (this.isRegistered)
						{
							if (this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
							{
								showError("YOU HAVE ALREADY REGISTERED.", "USER REGISTERED");
							} else 
							{
								this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
							}
						} else
						{
							gotoView("SelectUserType");
						}
						break;
					case ViewEvent.LOCATION_FACEBOOK:
						
						if (!isFacebookRegistered  || this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
						{
							gotoView("FaceBookAuth01", {urn: barcode, optin_marketing: this.optin_marketing, optin_terms: this.optin_terms});
						} else
						{
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
						}
						break;
					case ViewEvent.LOCATION_STANDARD_REGISTRATION:
						if (!isStandardRegistered || this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
						{
							gotoView("UserForm", {urn: barcode, optin_marketing: this.optin_marketing, optin_terms: this.optin_terms});
						} else
						{
							
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
							
						}
						break;
					case ViewEvent.LOCATION_FACEBOOK_FORCELOGOUT:
						gotoView("FaceBookLogoutOverride",  e.object);
						
						break;
					
					case ViewEvent.LOCATION_FACEBOOK_REGISTERED:
						this.dispatchEvent( new UserEvent(UserEvent.REGISTERED, "facebook"));
						this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_REGISTRATION_COMPLETE ));
						
						break;
					
					case ViewEvent.LOCATION_REGISTRATION_COMPLETE:
						gotoView("Thankyou");
						break;
					
					case ViewEvent.LOCATION_PHOTO_SELECTED_USER:
						gotoView("CameraCapture", e.object);
						break;
					case ViewEvent.LOCATION_SELECT_GAME_TEAM:
						gotoView("TeamCarousel", e.object );
						break;
					case ViewEvent.LOCATION_SELECT_TEAM:
						gotoView("SelectRegistrationTeam");
						break;					
					case ViewEvent.LOCATION_RESULT:
						showError("RESULTS TO BE IMPLEMENTED");
						break;
					case ViewEvent.LOCATION_GAME:
						
						if (ApplicationType == APPLICATION_TYPE_GAME)
						{
							gotoView("Game", e.object);
							
						} else if  (ApplicationType == APPLICATION_TYPE_GAME_SELECT_USER )
						{
							gotoView("PhotoUserSelect",  {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered});
							
						} else if  ( this.ApplicationType == APPLICATION_TYPE_REGISTER_GAME)
						{
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_PHOTO_SELECTED_USER, {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered, id: this.userId, userName: this.userName } ));
							
						} else 
						{
							gotoView("ScanWristBand");
							showError("UNKNOWN ACTIVTIY : '"+e.location+"'", "NOT IMPLEMENTED");
						}
						break;
					
					case ViewEvent.LOCATION_GAME_COMPLETE:
						gotoView("SelectUserType");
						break;
					case ViewEvent.LOCATION_REGISTRATION:
						gotoView("Registration");
						break;
					case ViewEvent.LOCATION_WELCOME_BACK:
						gotoView("WelcomeBack");
						break;
					
					default:
				}
			}
			
			protected function error(e:KioskError=null):void
			{
				showError(e.message, e.title, e.exitFunction);
			}
			
			protected function notifyIdle(e:Event):void
			{
				if (this.ApplicationType == APPLICATION_TYPE_GAME)
				{
				} else 
				{
					defaultView();
				}
			}
			
			protected function showError(msg:String="", title:String="", exitFunction:Function=null):void
			{
				clearPopups();
				
				alertbox = new ErrorAlert();
				alertbox.message = msg;
				alertbox.windowTitle = title;
				alertbox.exitFunction = exitFunction;
				
				PopUpManager.addPopUp(alertbox, this);
				PopUpManager.centerPopUp(alertbox);
				centerPopups();
			}
			
			protected function showPassword(title:String="", password:String=null, exitFunction:Function=null):void
			{
				clearPopups();
				
				passwordbox = new PasswordAlert();
				passwordbox.windowTitle = title;
				passwordbox.password = password;
				passwordbox.exitFunction = exitFunction;
				
				PopUpManager.addPopUp(passwordbox, this, false);
				PopUpManager.centerPopUp(passwordbox);
				//this.dispatchEvent( new ApplicationEvent( ApplicationEvent.POPUP_OPEN ) );
				centerPopups();
			}
			
			protected function defaultView(e:Event=null):void
			{
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
			}
			
			protected function config(event:MouseEvent=null):void
			{
				if (loggedIn)
				{
					this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_CONFIG ));
					
				} else {
					showPassword("Please enter password", password, login)
				}
			}
			
			protected function login( e:Event=null ):void
			{
				this.loggedIn = true;
				config();
			}
			
			protected function exitApplication(event:MouseEvent=null):void
			{
				NativeApplication.nativeApplication.exit();
			}
			
			protected function setBarCode(e:UserEvent):void
			{
				barcode = e.urn;
			}
			
			protected function setScore(e:UserEvent):void
			{
				score = e.score;
			}
			
			protected function setIsRegistered(e:UserEvent):void
			{
				this.isRegistered =  (e.userType)
				this.userId = e.id;
				this.userName = e.name;
			}
			
			public function get isFacebookRegistered():Boolean
			{
				return this.isRegistered =="facebook";
			}
			
			public function get isStandardRegistered():Boolean
			{
				return this.isRegistered =="classic";
			}
			
			protected function get ApplicationTypeNumber():int
			{
				switch (this.ApplicationType)
				{
					case APPLICATION_TYPE_GAME:
						return 3;
						break;
					default:
						return -1;
				}
			}
			
			protected function setMarketingOptin( e:UserEvent ):void
			{
				optin_marketing = e.optin_marketing
			}
			
			protected function setTermsOptin( e:UserEvent ):void
			{
				optin_terms = e.optin_terms;
			}
			
			protected function showDropshadow( e:Event = null ):void
			{
				
				hideDropshadow();
				if (scale<1)
				{
					borderHolder.filters = [ new spark.filters.DropShadowFilter(10,45, 0 ,.5, 10,10) ];
				}
			}
			
			protected function hideDropshadow( e:Event = null ):void
			{
				borderHolder.filters = [ ];
			}
			
			protected function setLogin( e:Event ):void
			{
				this.loggedIn = (e.type=="login");
			}
			
			public function isEmbedded(fontName:String):Boolean {
				var tf:TextFormat = new TextFormat();
				tf.font = fontName;
				return FlexGlobals.topLevelApplication.systemManager.isFontFaceEmbedded(tf);
			}
			
			private function setApplicationVersion():void {
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
			}
			
			protected function videoSettings(event:FlexEvent):void
			{
				OSMFSettings.enableStageVideo = false;	
			}
			
			
			protected function debugEventHandler(event : DebugEvent):void
			{
				//debugPanel.appendOutput(String(event.socketCode));
			}
			
			protected function typingHandler(event:KeyboardEvent):void
			{
				runningKeySequence.unshift(event.keyCode);
				if(runningKeySequence.length > 10)
				{
					runningKeySequence.pop();
				}
				
				var i : int;
				var n : int = debugKeySequence.length;
				var sequencesMatch : Boolean = true;
				
				for(i=0; i<n; i++)
				{
					if(runningKeySequence[i] != debugKeySequence[i])
					{
						sequencesMatch = false;
						break;
					}
				}
				if(sequencesMatch)
				{
					debugPanel.visible = true;
				}
			}
			
			private function checkUpdate():void {
				appUpdater.updateURL = "http://www.bpllive.com/updatedreamteam/update.xml";
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.addEventListener(ErrorEvent.ERROR, onError);
				appUpdater.isCheckForUpdateVisible = true;
				appUpdater.isFileUpdateVisible = true;
				appUpdater.isInstallUpdateVisible = true;
				appUpdater.initialize();
			}
			
			private function onUpdate(event:UpdateEvent):void {
				appUpdater.checkNow();
			}
			
			private function onError(event:ErrorEvent):void {
				Alert.show(event.toString());
			}
			
			
		]]>
	</fx:Script>
	
	<s:VGroup id="background"  width="100%" height="100%" verticalAlign="bottom" >
		<s:Image verticalAlign="bottom"  width="100%" height="100%" click="fullscreen()"
				 smooth="true" smoothingQuality="high" alpha="0" source="assets/images/BG.jpg"/>
	</s:VGroup>
	
	<s:BorderContainer id="navigationbar" includeInLayout="false" borderAlpha="0" width="{this.stage.stageWidth}" height="90" click="fullscreen(event)">
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" alpha="0"/>
				<s:GradientEntry color="0x000000" alpha="0"/>
			</s:LinearGradient>
		</s:backgroundFill>
		<s:HGroup verticalAlign="middle" width="100%" height="90">
			<s:HGroup left="20" paddingLeft="20">
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/logo_live_small.png')" click="{defaultView()}"/>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="right" paddingRight="0" verticalAlign="middle" height="90">
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/nm-no-connection.gif')" id="connStatus" label="{ML.t('NO CONNECTION')}" color="0xFFFFFF" visible="false" />
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/home_logo.png')" click="{defaultView()}"/>
				<s:Button skinClass="skins.BasicButton" styleName="nav" label="{ML.t('Quit')}" click="exitApplication(event)" id="quitButton" color="0xFFFFFF" visible="{loggedIn}" includeInLayout="{loggedIn}" />
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/padlock.png')" click="config(event)" color="0xFFFFFF" />
				<s:Button label="userform" click="{gotoView('UserForm')}"/>
			</s:HGroup>		
		</s:HGroup>
	</s:BorderContainer>
	
	<s:VGroup id="contentholder" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
		
		<s:Group id="holder" width="{MAX_WIDTH}" height="{MAX_HEIGHT}">
			
			<s:BorderContainer id="borderHolder" width="100%"  height="100%" backgroundAlpha="0" borderVisible="false">
				
				<mx:ViewStack id="Stack" height="100%" width="100%"  creationPolicy="all">
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:SelectGameOrResult id="SelectGameOrResult" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:TeamCarousel id="TeamCarousel" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:Game id="Game" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:SelectUserType id="SelectUserType" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}" verticalAlign="top"  showEffect="{showFX}">
						<views:FaceBookAuth01 id="FaceBookAuth01" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<registration:UserForm id="UserForm" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:GameSelectUser id="GameUserSelect"  />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:ApplicationType id="SelectApplication" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:Thankyou id="Thankyou" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:FaceBookLogoutOverride id="FaceBookLogoutOverride" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<views:Teamsheet id="Teamsheets" />
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<s:BorderContainer width="100%" height="100%" borderVisible="false" backgroundImage="@Embed('./assets/images/Background2.png')">
							<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
								
							
							<registration:RegistrationScan id="RegistrationView" debug="debugEventHandler(event)"/>
							</s:VGroup>
						</s:BorderContainer>
					</mx:VBox>
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<registration:SelectTeam id="SelectRegistrationTeam"/>
					</mx:VBox>					
					
					<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
						<registration:WelcomeBackView id="WelcomeBack"/>
					</mx:VBox>									
					
				</mx:ViewStack>
			</s:BorderContainer>
			
		</s:Group>
	</s:VGroup>
	
	<debug:DebugPanel id="debugPanel" visible="false"/>
	
</s:WindowedApplication>
